
= Command Line Tools for System Administrators
:doctype: book
:toc:
:icons:

:source-highlighter: coderay

:numbered!:

A list of common and uncommon command-line tools that might prove useful to system adminsitrators.
Usage examples are occasionally provided, although links to usage examples are more common.

https://www.spec.org/hpg/download.bin/user/b6b84d75f6d14f27db38a7491bc97e0af__;!!KwNVnqRv!RtFDUJcIABg_3x6xcyZ8IbEObOqFB_Q1PCghZmfskvmhrtWBfDPd6nLvdxw5$7bfb83aaed3c7dd9a70e9ffc72e65fa/hpc2021-1.0.3.iso.xz

https://www.spec.org/hpg/download.bin/user/b6b84d75f6d14f27db38a7491bc97e0af__;!!KwNVnqRv!RtFDUJcIABg_3x6xcyZ8IbEObOqFB_Q1PCghZmfskvmhrtWBfDPd6nLvdxw5$7bfb83aaed3c7dd9a70e9ffc72e65fa/hpc2021-1.0.3.iso.xz

== ONLINE DOCUMENTS

*Advanced Bash Scripting Guide* (2014) - https://tldp.org/LDP/abs/html/[`https://tldp.org/LDP/abs/html/`]

*BASH FAQ* - http://mywiki.wooledge.org/BashFAQ[`http://mywiki.wooledge.org/BashFAQ`]

*Bash Guide for Beginners* - https://tldp.org/LDP/Bash-Beginners-Guide/html/[`https://tldp.org/LDP/Bash-Beginners-Guide/html/`]

*Bash Hackers Wiki* - https://wiki.bash-hackers.org/doku.php[`https://wiki.bash-hackers.org/doku.php`]

*Bash Pitfalls* - http://mywiki.wooledge.org/BashPitfalls[`http://mywiki.wooledge.org/BashPitfalls`]

*GNU Bash Manual* (2020) - http://www.gnu.org/software/bash/manual/[`http://www.gnu.org/software/bash/manual/`]

*Pure Bash Bible* - https://github.com/dylanaraps/pure-bash-bible[`https://github.com/dylanaraps/pure-bash-bible`]

*Wikibooks Bash Shell Scripting* - https://en.wikibooks.org/wiki/Bash_Shell_Scripting[`https://en.wikibooks.org/wiki/Bash_Shell_Scripting`]

== BOOKS

*bash Cookbook, 2nd Ed.* (2017) - https://books.google.com/books?id=y6A4DwAAQBAJ[`https://books.google.com/books?id=y6A4DwAAQBAJ`]

*Bash Pocket Reference, 2nd Ed.* (2016) - https://books.google.com/books?id=pIyYCwAAQBAJ[`https://books.google.com/books?id=pIyYCwAAQBAJ`]

*Classic Shell Scripting* (2005) - https://books.google.com/books?id=jO-iKwPRX0QC[`https://books.google.com/books?id=jO-iKwPRX0QC`]

*Effective awk Programming, 3rd Ed.* (2001) - https://books.google.com/books?id=rU7MAQAAQBAJ[`https://books.google.com/books?id=rU7MAQAAQBAJ`]

*Introductory Command Line Unix for Users* (2006) - https://books.google.com/books?id=4hStzByjNvEC[`https://books.google.com/books?id=4hStzByjNvEC`]

*Learning Linux Shell Scripting* (2015) - https://books.google.com/books?id=1h7lCwAAQBAJ[`https://books.google.com/books?id=1h7lCwAAQBAJ`]

*Learning the bash Shell, 3rd Ed.* (2005) - https://books.google.com/books?id=dzBCH3x6fYEC[`https://books.google.com/books?id=dzBCH3x6fYEC`]

*The Linux Command Line* (2012) - https://books.google.com/books?id=OCFKdl3wEDIC[`https://books.google.com/books?id=OCFKdl3wEDIC`]

*Linux Command Line Beginner's Guide* (2013) - https://books.google.com/books?id=hhtnAgAAQBAJ[`https://books.google.com/books?id=hhtnAgAAQBAJ`]

*Linux Phrasebook* (2015) - https://books.google.com/books?id=qkQpCwAAQBAJ[`https://books.google.com/books?id=qkQpCwAAQBAJ`]

*Linux Pocket Guide* (2012) - https://books.google.com/books?id=5BdLYjfUTdoC[`https://books.google.com/books?id=5BdLYjfUTdoC`]

*Linux Shell Scripting Bootcamp* (2017) - https://books.google.com/books?id=zeZDDwAAQBAJ[`https://books.google.com/books?id=zeZDDwAAQBAJ`]

*Linux Shell Scripting Cookbook* (2013) - https://books.google.com/books?id=h_WlXqgPV00C[`https://books.google.com/books?id=h_WlXqgPV00C`]

*Linux Shell Scripting Essentials* (2015) - https://books.google.com/books?id=9vCoCwAAQBAJ[`https://books.google.com/books?id=9vCoCwAAQBAJ`]

*Mastering Linux Shell Scripting* (2015) - https://books.google.com/books?id=ITjlCwAAQBAJ[`https://books.google.com/books?id=ITjlCwAAQBAJ`]

*A Practical Guide to Linux Commands, Editors, and Shell Programming, 3rd Ed.* (2013) - https://www.google.com/books/edition/A_Practical_Guide_to_Linux_Commands_Edit/6gFvAQAAQBAJ[`https://www.google.com/books/edition/A_Practical_Guide_to_Linux_Commands_Edit/6gFvAQAAQBAJ`]

*sed and awk Pocket Reference, 2nd Ed.* (2002) - https://books.google.com/books?id=1Jq1jhZxaHMC[`https://books.google.com/books?id=1Jq1jhZxaHMC`]

*sed and awk: UNIX Power Tools, 2nd Ed.* (1997) - https://books.google.com/books?id=Xu0G31e-4gIC[`https://books.google.com/books?id=Xu0G31e-4gIC`]

*Shell Programming in Unix, Linux and OS X* (2016) - https://books.google.com/books?id=wyrqDAAAQBAJ[`https://books.google.com/books?id=wyrqDAAAQBAJ`]

*UNIX for the Impatient, 2nd Ed.* (1996) - https://books.google.com/books?id=kqJVAAAAMAAJ[`https://books.google.com/books?id=kqJVAAAAMAAJ`]

*UNIX Power Tools, 3rd Ed.* (2002) - https://books.google.com/books?id=tDDb5zRoONwC[`https://books.google.com/books?id=tDDb5zRoONwC`]

== META

*Art of the Command Line* - https://github.com/jlevy/the-art-of-command-line[`https://github.com/jlevy/the-art-of-command-line`]

*Awesome Awesome Awesome* - https://github.com/t3chnoboy/awesome-awesome-awesome[`https://github.com/t3chnoboy/awesome-awesome-awesome`]

*Awesome Bash* - https://github.com/awesome-lists/awesome-bash[`https://github.com/awesome-lists/awesome-bash`]

*Awesome Cheatsheets* - https://github.com/LeCoupa/awesome-cheatsheets[`https://github.com/LeCoupa/awesome-cheatsheets`]

*Awesome CLI Apps* - https://github.com/agarrharr/awesome-cli-apps[`https://github.com/agarrharr/awesome-cli-apps`]

*Awesome Linux Software* - https://github.com/luong-komorebi/Awesome-Linux-Software[`https://github.com/luong-komorebi/Awesome-Linux-Software`]

*Awesome Shell* - https://github.com/alebcay/awesome-shell[`https://github.com/alebcay/awesome-shell`]

*Awesome Sysadmin* - https://github.com/kahun/awesome-sysadmin[`https://github.com/kahun/awesome-sysadmin`]

*Awesome TUIs* - https://github.com/rothgar/awesome-tuis[`https://github.com/rothgar/awesome-tuis`]

*CLI for Full Stack Engineers* - https://github.com/nemild/cli_for_full_stack[`https://github.com/nemild/cli_for_full_stack`]

*CommandLineFu* - https://www.commandlinefu.com/commands/browse[`https://www.commandlinefu.com/commands/browse`]

*Command Line Utilities* - https://lib.rs/command-line-utilities[`https://lib.rs/command-line-utilities`]

*Digital Ocean Tutorials* - https://www.digitalocean.com/community/tutorials[`https://www.digitalocean.com/community/tutorials`]

*ExplainShell* - https://explainshell.com/[`https://explainshell.com/`]

*Latest Snippets* - https://jonlabelle.com/snippets[`https://jonlabelle.com/snippets`]

*Modern Unix* - https://github.com/bvaisvil/modern-unix[`https://github.com/bvaisvil/modern-unix`]

== CREATING COMMAND LINE INTERFACES

https://docs.python-guide.org/scenarios/cli/[`https://docs.python-guide.org/scenarios/cli/`]

=== Cement

https://github.com/datafolklabs/cement[`https://github.com/datafolklabs/cement`]

https://builtoncement.com/[`https://builtoncement.com/`]

=====
Cement is an advanced Application Framework for Python, with a primary focus on Command Line Interfaces (CLI). Its goal is to introduce a standard, and feature-full platform for both simple and complex command line applications as well as support rapid development needs without sacrificing quality. Cement is flexible, and it's use cases span from the simplicity of a micro-framework to the complexity of a mega-framework.
=====

=== click

https://github.com/pallets/click/[`https://github.com/pallets/click/`]

=====
Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary.
=====

=== docopt

http://docopt.org/[`http://docopt.org/`]

=====
Docopt is a lightweight python package for creating command line interface easily by parsing POSIX-style or Markdown usage instructions. Docopt uses conventions that have been used for years in formatting help messages and man page for describing a command line interface. An interface description in docopt is such a help message, but formalized.
=====

=== hug

https://hugapi.github.io/hug/[`https://hugapi.github.io/hug/`]

http://arogozhnikov.github.io/2020/10/01/dont-write-cli.html[`http://arogozhnikov.github.io/2020/10/01/dont-write-cli.html`]

=====
hug aims to make developing Python driven APIs as simple as possible, but no simpler. As a result, it drastically simplifies Python API development.  hug's Design Objectives:

* Make developing a Python driven API as succinct as a written definition.
* The framework should encourage code that self-documents.
* It should be fast. A developer should never feel the need to look somewhere else for performance reasons.
* Writing tests for APIs written on-top of hug should be easy and intuitive.
* Magic done once, in an API framework, is better than pushing the problem set to the user of the API framework.
* Be the basis for next generation Python APIs, embracing the latest technology.
=====

=== PyInquirer

https://github.com/CITGuru/PyInquirer[`https://github.com/CITGuru/PyInquirer`]

=====
PyInquirer strives to be an easily embeddable and beautiful command line interface for Python. PyInquirer wants to make it easy for existing Inquirer.js users to write immersive command line applications in Python. We are convinced that its feature-set is the most complete for building immersive CLI applications.

PyInquirer should ease the process of - providing error feedback - asking questions - parsing input - validating answers - managing *hierarchical prompts.
=====

=== Typer

https://github.com/tiangolo/typer[`https://github.com/tiangolo/typer`]

http://arogozhnikov.github.io/2020/10/01/dont-write-cli.html[`http://arogozhnikov.github.io/2020/10/01/dont-write-cli.html`]

=====
Typer is a library for building CLI applications that users will love using and developers will love creating. Based on Python 3.6+ type hints.
The key features are:

* Intuitive to write: Great editor support. Completion everywhere. Less time debugging. Designed to be easy to use and learn. Less time reading docs.
* Easy to use: It's easy to use for the final users. Automatic help, and automatic completion for all shells.
* Short: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.
* Start simple: The simplest example adds only 2 lines of code to your app: 1 import, 1 function call.
* Grow large: Grow in complexity as much as you want, create arbitrarily complex trees of commands and groups of subcommands, with options and arguments.
=====

== ALTERNATE SHELLS

=== Dune

https://github.com/adam-mcdaniel/dune[`https://github.com/adam-mcdaniel/dune`]

=====
I feel that bash is great in a lot of ways, but it doesn't exactly feel cozy: it's lacking a sort of personal touch, and it's also missing quick and easy customizability. With my last shell, Atom, I had accomplished some of the coziness that bash was missing, but I also introduced a lot of really fatal flaws in the syntax and the type system.

Dune, however, is designed completely differently from Atom (although you might notice the similarities in their widget systems). The interpreter itself is standalone, and it holds almost none of the functionality you see in the default distribution of Dune. If you wanted to, you could write a custom frontend and make a unique Dune based shell of your own!

This frontend implementation turns the coziness dial to 11. 
=====

== COMMAND-LINE APPLICATIONS


// AAAA

== abcde

https://abcde.einval.com/wiki/[`https://abcde.einval.com/wiki/`]

=====
Grab an entire CD and compress it to Ogg/Vorbis, MP3, FLAC, AAC, Ogg/Speex and/or MPP/MP+(Musepack) format.
With one command, abdce will:

* Do a CDDB or Musicbrainz query over the Internet to look up your CD or use a locally stored CDDB entry, or read CD-TEXT from your CD as a fallback for track information
* Grab an audio track (or all the audio CD tracks) from your CD
* Normalize the volume of the individual file (or the album as a single unit)
* Compress to Ogg/Vorbis, MP3, FLAC, Ogg/Speex, MPP/MP+(Musepack), M4A and/or Opus format(s), all in one CD read
* Comment or ID3/ID3v2 tag
* Give an intelligible filename
* Calculate replaygain values for the individual file (or the album as a single unit)
* Delete the intermediate WAV file (or save it for later use)
* Repeat until finished
=====

== ack

https://beyondgrep.com/[`https://beyondgrep.com/`]

=====
Designed for programmers with large heterogeneous trees of source code, ack is written in portable Perl 5 and takes advantage of the power of Perl's regular expressions. 

Ack searches the named input FILEs or DIRECTORYs for lines containing a match to the given PATTERN. By default, ack prints the matching lines. If no FILE or DIRECTORY is given, the current directory will be searched.
PATTERN is a Perl regular expression.

Ack can also list files that would be searched, without actually searching them, to let you take advantage of ack's file-type filtering capabilities.
=====

== ACME Labs

https://www.acme.com/software[`https://www.acme.com/software`]

These are individual applications that are downloaded and installed
separately.

* `ablog` - a simple personal weblog maker
* `acme_chat` - interface to ACME News chat
* `bigcal` - make a 78-column version of the output of the "cal" command.
* `bigint` - large integer package.
* `blackmilter` - blacklist mail filter module.
* `brev` - binary file-reversal program. Fun to use on raw sound files.

-----
    closest_fractions, show the closest rational approximations to a real.
    coords, geographical coordinate conversion routines.
    exif_copy, copy EXIF data from one JPEG to another.
    countdown, count down a specified time interval.
    date_offset, display date and time, with an offset.
    date_parse, date-parsing routine and apps.
    db, simple database manager.
    factor, prime-factor numbers.
    file_date, display the date of a given file.
    file_stat, display all info for specified files.
    find_old_files, find files older than a specified time-offset.
    globe, show an ASCII graphic of the currently-lighted face of the Earth.
    googrep, search text using a Google-style pattern.
    graymilter, graylist mail filter module.
    hgrep, highlight results of a grep.
    http_get, get the contents of an HTTP URL.
    http_load, multiprocessing HTTP test client.
    http_ping, measure HTTP latency.
    http_post, do a POST to an HTTP URL.
    image_size, figure out the size of GIF, JPEG, XBM, or PNG files.
    ipizer, improve a sendmail log file by adding IP addresses.
    js_httpd, really small HTTP server in JavaScript.
    lam, laminate two or more files.
    libpnmrw, pbm/pgm/ppm read/write library.
    libsmpw, self-maintaining getpwuid/getpwnam replacement.
    mapext, map files from one extension to another via a specified command.
    micro_httpd, really small HTTP server.
    micro_inetd, simple network service spawner.
    micro_proxy, really small HTTP/HTTPS proxy.
    mini_httpd, small HTTP server.
    mini_sendmail, accept email on behalf of real sendmail.
    mod_sample, sample Apache module.
    mudecode, turbocharged MIME / UU decoder.
    newmail, watch for new mail.
    oauth_sign, generate an OAuth signature.
    overlay, overlay two or more files. Useful for composing ASCII pictures.
    pbmplus, image file format conversion package.
    phoon, show an ASCII graphic of the current phase of the moon.
    random, print a random number.
    randomize, shuffle lines in a file.
    rcsscripts, shell scripts for using RCS.
    revl, reverse lines in a file.
    revpar, reverse a file by paragraphs.
    sample_milter, example mail filter module.
    saytime, talking clock for SPARCstations.
    saywha, front-end for write(1) that records messages.
    SecurePage, make self-decrypting web pages.
    select, extract fields from simple text databases.
    sfcmilter, sender-forgery-checker mail filter module.
    sightliner, find sight lines for the sun and moon.
    spfmilter, SPF mail filter module.
    sub_proxy, really small HTTP/HTTPS proxy with substitution.
    texttohtml, convert text to HTML.
    thttpd, tiny/turbo/throttling HTTP server.
    thumbnail_index, make an HTML index file for a bunch of images.
    users, list users, with line breaks and highlighting.
    weblog_digest, summarize traffic bursts in a web log file.
    weblog_parse, extract specified fields from a web log file.
    xantfarm, simple ant farm for X11.
    xbouncebits, bitmap animator for X11.
    XIP, XML Iterative Parsing.
    xml2c, convert an XML file into C struct/string declarations.
    xmlrpc, do an XML-RPC call.
    xphoon, phase of moon for X11.
    xsleep, trivial program to sleep and exit, for X11.
    xsplinefun, color doodle for X11.
    xsquig, color doodle for X11.
-----

== acxi

https://github.com/smxi/acxi[`https://github.com/smxi/acxi`]

https://smxi.org/docs/acxi-man.htm[`https://smxi.org/docs/acxi-man.htm`]

=====
A command line audio conversion program and audio processing program. It converts and syncs
all desired source lossless files to the desired output format, and to a different directory location.
It supports lossless input formats aiff/flac/raw/shn/wav. Output formats are flac, ogg, opus, or mp3. aif/raw/shn can only output to flac. mp3 can only have flac as input format.

By default, it will also copy over most common filetypes like .gif, .jpg, .png, and .txt. You can change the defaults using a configuration file, or the -c or -a options..
The destination directory cannot be the same as the source directory, but it can be inside of the source directory.
It can also generate or verify md5 and ffp checksum files if required, as well as tag/embed images using auto.tag or --tag / --image [filename] methods.
=====

== agedu

https://www.chiark.greenend.org.uk/\~sgtatham/agedu/[`https://www.chiark.greenend.org.uk/~sgtatham/agedu/`]

https://www.admin-magazine.com/HPC/Articles/How-Old-is-That-Data[`https://www.admin-magazine.com/HPC/Articles/How-Old-is-That-Data`]

=====
A utility to scan your files and record the last-access time of everything it scans.
It then creates an HTML report showing the last access times of all the files therein.
=====

== alien

https://sourceforge.net/projects/alien-pkg-convert/[`https://sourceforge.net/projects/alien-pkg-convert/`]

https://help.ubuntu.com/community/RPM/AlienHowto[`https://help.ubuntu.com/community/RPM/AlienHowto`]

=====
A program that converts linux packages between the rpm,deb,tgz and slp formats.

To directly install an RPM file:

`alien -i package.rpm`

To convert an RPM file to a Debian package:

`alien --to-deb --scripts package.rpm`

Converting from a Debian package to an RPM file is slightly more complicated.
Do this either as root or via sudo. Start with:

`alien --to-rpm --scripts dateutils_0.4.5-1.1_amd64.deb`

An attempt to install via:

`rpm -Uvh dateutils_0.4.5-1.1_amd64.deb`

will most likely result in an error like this:

-----
Verifying...                          ################################# [100%]
Preparing...                          ################################# [100%]
        file / from install of dateutils-0.4.5-2.1.x86_64 conflicts with file from package filesystem-3.10-1.fc30.x86_64
        file /usr/bin from install of dateutils-0.4.5-2.1.x86_64 conflicts with file from package filesystem-3.10-1.fc30.x86_64
-----

This is a job for `rpmrebuild`.  If you don't have it install it via:

`dnf install rpmrebuild`

and then enter:

`rpmrebuild -pe dateutils-0.4.5-2.1.x86_64.rpm`

which will put you into your preferred editor where you
can delete the following two lines:

-----
%dir %attr(0755, root, root) "/"
%dir %attr(0755, root, root) "/usr/bin"
-----

and then exit the editor where you will be asked if you want to rebuild.  Answer
yes and the package will be rebuilt without those lines.
A series of statements will be printed to the screen as it rebuilds the
file, culminating in something like this:

`result: /root/rpmbuild/RPMS/x86_64/dateutils-0.4.5-2.1.x86_64.rpm`

that indicates the file was rebuilt somewhere other than where the original
file dwells.  Install the rebuilt file via:

`rpm -Uvh /root/rpmbuild/RPMS/x86_64/dateutils-0.4.5-2.1.x86_64.rpm`
=====

== anew

https://github.com/tomnomnom/anew[`https://github.com/tomnomnom/anew`]

=====
Append lines from stdin to a file, but only if they don't already appear in the file. Outputs new lines to stdout too, making it a bit like a tee -a that removes duplicates.
=====

== angle-grinder

https://github.com/rcoh/angle-grinder[`https://github.com/rcoh/angle-grinder`]

=====
Slice and dice log files on the command line.

Angle-grinder allows you to parse, aggregate, sum, average, min/max, percentile, and sort your data. You can see it, live-updating, in your terminal. Angle grinder is designed for when, for whatever reason, you don't have your data in graphite/honeycomb/kibana/sumologic/splunk/etc. but still want to be able to do sophisticated analytics.

Angle grinder can process well above 1M rows per second (simple pipelines as high as 5M), so it's usable for fairly meaty aggregation. The results will live update in your terminal as data is processed. Angle grinder is a bare bones functional programming language coupled with a pretty terminal UI.
=====

== ansilove

https://github.com/ansilove/ansilove[`https://github.com/ansilove/ansilove`]

=====
AnsiLove is an ANSI and ASCII art to PNG converter, allowing to convert ANSI and artscene-related file formats into PNG images, supporting ANSI (.ANS), PCBoard (.PCB), Binary (.BIN), Artworx (.ADF), iCE Draw (.IDF), Tundra (.TND) and XBin (.XB) formats.

It creates size optimized 4-bit PNG files and supports SAUCE (Standard Architecture for Universal Comment Extensions), 80x25 and 80x50 PC fonts (including all the 14 MS-DOS charsets), Amiga fonts, and iCE colors.
=====

== archivebox

https://github.com/ArchiveBox/ArchiveBox[`https://github.com/ArchiveBox/ArchiveBox`]

=====
ArchiveBox is a powerful, self-hosted internet archiving solution to collect, save, and view sites you want to preserve offline.

You can set it up as a command-line tool, web app, and desktop app (alpha), on Linux, macOS, and Windows.

You can feed it URLs one at a time, or schedule regular imports from browser bookmarks or history, feeds like RSS, bookmark services like Pocket/Pinboard, and more.

It saves snapshots of the URLs you feed it in several formats: HTML, PDF, PNG screenshots, WARC, and more out-of-the-box, with a wide variety of content extracted and preserved automatically (article text, audio/video, git repos, etc.).

The goal is to sleep soundly knowing the part of the internet you care about will be automatically preserved in durable, easily accessible formats for decades after it goes down.
=====

== asciidoctor

https://github.com/asciidocfx/AsciidocFX[`https://github.com/asciidocfx/AsciidocFX`]

https://github.com/ahus1/asciidoctor-deepdive[`https://github.com/ahus1/asciidoctor-deepdive`]

https://github.com/lee-b/golf[`https://github.com/lee-b/golf`]

*Convert Asciidoc to Markdown* - https://tinyapps.org/blog/201701240700_convert_asciidoc_to_markdown.html[`https://tinyapps.org/blog/201701240700_convert_asciidoc_to_markdown.html`]

=== Antora

https://antora.org/[`https://antora.org/`]

https://github.com/feelpp/asciidoctor-remote-include-processor[`https://github.com/feelpp/asciidoctor-remote-include-processor`]

=====
The multi-repository documentation site generator for tech writers who write in AsciiDoc. 
=====

=== asciidoctor-bibtex

https://github.com/asciidoctor/asciidoctor-bibtex[`https://github.com/asciidoctor/asciidoctor-bibtex`]

=====
Adds bibtex integration to AsciiDoc documents by introducing three new macros: cite:[KEY], bibitem:[KEY] and bibliography::[]. Citations are parsed and replaced with formatted inline texts, and reference lists are automatically generated and inserted into where bibliography::[] is placed. bibitem:[KEY] will insert a rendered bibliography item directly into the text.

asciidoctor-bibtex is designed to be used as an extension to Asciidoctor. Thus this extension can be used together with other asciidoctor extensions such as asciidoctor-mathematical and asciidoctor-pdf to enrich your AsciiDoc experience.
=====

=== asciidoctor-chunker

https://github.com/wshito/asciidoctor-chunker[`https://github.com/wshito/asciidoctor-chunker`]

=====
Generates chunked (multi-page) HTML from Asciidoctor's single HTML file with the support of fine-tuned splits by chapters, sections, or any depth of subsections.
=====

=== asciidoctor-diagram

https://docs.asciidoctor.org/diagram-extension/latest/[`https://docs.asciidoctor.org/diagram-extension/latest/`]

=====
Asciidoctor Diagram is a set of Asciidoctor extensions that enable you to add diagrams, which you describe using plain text, to your AsciiDoc document.

The extensions supports the AsciiToSVG, BlockDiag (BlockDiag, SeqDiag, ActDiag, NwDiag), Bytefield-SVG, Ditaa, dpic, Erd, Gnuplot, GraphViz, Mermaid, Msc, Nomnoml, Pikchr, PlantUML, Shaape, State Machine Cat, SvgBob, Symbolator, Syntrax, UMLet, Vega, Vega-Lite and WaveDrom syntax.
=====

=== asciidoctor-epub3

https://github.com/asciidoctor/asciidoctor-epub3[`https://github.com/asciidoctor/asciidoctor-epub3`]

=====
Asciidoctor EPUB3 is a set of Asciidoctor extensions for converting AsciiDoc documents directly to the EPUB3 and KF8/MOBI e-book formats.
=====

=== asciidcotor-fb2

https://github.com/asciidoctor/asciidoctor-fb2[`https://github.com/asciidoctor/asciidoctor-fb2`]

=====
Asciidoctor FB2 is an Asciidoctor extension for converting AsciiDoc documents directly to the FB2 e-book format.
=====

=== asciidoctor-html5s

https://github.com/jirutka/asciidoctor-html5s[`https://github.com/jirutka/asciidoctor-html5s`]

=====
This project provides alternative HTML5 converter (backend) for Asciidoctor that focuses on correct semantics, accessibility and compatibility with common typographic CSS styles.
=====

=== asciidoctor-interdoc

https://github.com/jirutka/asciidoctor-interdoc-reftext[`https://github.com/jirutka/asciidoctor-interdoc-reftext`]

=====
This project is an Asciidoctor extension providing implicit (automatic) reference text (label) for inter-document cross references.
=====

=== asciidoctor.js CL

https://github.com/asciidoctor/asciidoctor-cli.js[`https://github.com/asciidoctor/asciidoctor-cli.js`]

https://github.com/asciidoctor/asciidoctor.js[`https://github.com/asciidoctor/asciidoctor.js`]

https://opalrb.com/[`https://opalrb.com/`]

=====
The Command Line Interface (CLI) for Asciidoctor.js.
=====

=== asciidoctor-jupyter

https://github.com/neo4j-documentation/asciidoctor-jupyter[`https://github.com/neo4j-documentation/asciidoctor-jupyter`]

=====
A Jupyter converter for Asciidoctor.js. Write your Notebook in AsciiDoc.
=====

=== asciidoctor-katex

https://github.com/jirutka/asciidoctor-katex[`https://github.com/jirutka/asciidoctor-katex`]

=====
This project provides an Asciidoctor extension for converting block and inline STEM in TeX notation (latexmath) to HTML using KaTeX library right during document conversion (instead of in browser on client-side).
=====

=== asciidoctor-latex

https://github.com/asciidoctor/asciidoctor-latex[`https://github.com/asciidoctor/asciidoctor-latex`]

=====
Asciidoctor LaTeX defines an extended syntax for the AsciiDoc markup language (AsciiDoc-LaTeX) that closely parallels LaTeX for inline and display mathematical formulas and for environments. Documents written in this extended markup language can be converted into HTML or LaTeX.
=====

=== asciidoctor-mathematical

https://github.com/asciidoctor/asciidoctor-mathematical[`https://github.com/asciidoctor/asciidoctor-mathematical`]

https://github.com/gjtorikian/mathematical[`https://github.com/gjtorikian/mathematical`]

=====
Processes latexmath and stem blocks and inline macros and replaces them with generated SVG or PNG images, thus enables stem contents on a much wider range of asciidoctor backends. Currently, it is tested to works well with the html, docbook, pdf and latex backends. For stem blocks and macros, only the latexmath type is supported.
=====

=== asciidoctor-multipage

https://github.com/owenh000/asciidoctor-multipage[`https://github.com/owenh000/asciidoctor-multipage`]

=====
A multipage HTML converter for Asciidoctor—extends the Html5Converter to generate multiple HTML pages from the document tree.
=====

=== asciidoctor-open-document

https://github.com/CourseOrchestra/asciidoctor-open-document[`https://github.com/CourseOrchestra/asciidoctor-open-document`]

=====
Open Document backend for Asciidoctor allows to convert asciidoc documentation into fodt (plain Open Document) format.
The fodt file may be converted with LibreOffice SDK or CLI into pdf, odt, docx, doc etc.
=====

=== asciidoctor-pdf

https://github.com/asciidoctor/asciidoctor-pdf[`https://github.com/asciidoctor/asciidoctor-pdf`]

=====
Asciidoctor PDF is a native PDF converter for AsciiDoc. It bypasses the requirement to generate an intermediary format such as DocBook, Apache FO, or LaTeX. Instead, you can use this extension to convert your documents directly from AsciiDoc to PDF. Its aim is to take the pain out of creating PDF documents from AsciiDoc.
=====

=== asciidoctor-rfc
https://github.com/metanorma/asciidoctor-rfc[`https://github.com/metanorma/asciidoctor-rfc`]

https://www.metanorma.org/[`https://www.metanorma.org/`]

=====
The xml2rfc Vocabulary (hereinafter “RFC XML”) is an XML-based language used for writing Internet-Drafts and RFCs (RFC7322).
This gem allows you to author these types of documents in AsciiDoc, and outputs RFC XML output in both v3 and v2 formats.

This gem has been subsumed into the Metanorma publishing framework. Development of AsciiRFC is continued at the metanorma-ietf gem. 
=====

=== asciidoctor-skins

https://github.com/darshandsoni/asciidoctor-skins[`https://github.com/darshandsoni/asciidoctor-skins`]

=====
Asciidoctor comes with a very clean default stylesheet that saves users from spending time formatting their documents. This repository is for users who would like some other style choices, without having to rewrite stylesheets from scratch. All stylesheets in here pull in asciidoctor’s defaults first and then apply custom styles to a few elements.
=====

=== asciidoctor-vscode

https://github.com/asciidoctor/asciidoctor-vscode[`https://github.com/asciidoctor/asciidoctor-vscode`]

=====
An extension that provides live preview, syntax highlighting and snippets for the AsciiDoc format using Asciidoctor flavor.
=====

=== KB4IT

https://github.com/t00m/KB4IT[`https://github.com/t00m/KB4IT`]

=====
KB4IT is a static website generator based on Asciidoctor sources mainly for technical documentation purposes.
=====

=== kramdown-asciidoc

https://github.com/asciidoctor/kramdown-asciidoc[`https://github.com/asciidoctor/kramdown-asciidoc`]

https://kramdown.gettalong.org/[`https://kramdown.gettalong.org/`]

=====
Kramdown AsciiDoc (gem: kramdown-asciidoc, command: kramdoc) is a kramdown extension for converting Markdown documents to AsciiDoc. Notably, the converter generates modern AsciiDoc syntax suitable for use with Asciidoctor.
=====

=== reverse_adoc

https://github.com/metanorma/reverse_adoc[`https://github.com/metanorma/reverse_adoc`]

=====
Transforms HTML and Microsoft Word into AsciiDoc.
=====

== asdf

https://github.com/asdf-vm/asdf[`https://github.com/asdf-vm/asdf`]

=====
A CLI tool that can manage multiple language runtime versions on a per-project basis. It is like gvm, nvm, rbenv & pyenv (and more) all in one! Simply install your language's plugin.

Once installed you can obtain a list of all available language plugins via:

`asdf plugin list all`

Add a plugin from the repo, in this case for `aria2`.

`asdf plugin add aria2`

Find all available versions of `aria2`:

`asdf list all aria2`

Install the latest version, as of this writing `1.35.0`:

`asdf install aria2 1.35.0`
=====

== aria2

https://aria2.github.io/[`https://aria2.github.io/`]

=====
A lightweight multi-protocol & multi-source command-line download utility. It supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink. aria2 can be manipulated via built-in JSON-RPC and XML-RPC interfaces.

Download from a single web source:

`aria2c http://example.org/mylinux.iso`

Download from two sources:

`aria2c http://a/f.iso ftp://b/f.iso`

Download using two connections per host:

`aria2c -x2 http://a/f.iso`

Download torrent:

`aria2c http://example.org/mylinux.torrent`

Download torrent magnet URI:

`aria2c 'magnet:?xt=urn:btih:248D0A1CD08284299DE78D5C1ED359BB46717D8C'`
=====

== asciinema

https://github.com/asciinema/asciinema[`https://github.com/asciinema/asciinema`]

https://asciinema.org/[`https://asciinema.org/`]

=====
Asciinema lets you easily record terminal sessions and replay them in a terminal as well as in a web browser.
=====

== atuin

https://github.com/ellie/atuin[`https://github.com/ellie/atuin`]

=====
Atuin replaces your existing shell history with a SQLite database, and records additional context for your commands. Additionally, it provides optional and fully encrypted synchronisation of your history between machines, via an Atuin server.
It can also search your command history.
=====

== awk

https://en.wikipedia.org/wiki/AWK[`https://en.wikipedia.org/wiki/AWK`]

https://github.com/darkn3rd/script-tut/tree/master/gen_scripts/awk[`https://github.com/darkn3rd/script-tut/tree/master/gen_scripts/awk`]

https://www.gnu.org/software/gawk/manual/gawk.html[`https://www.gnu.org/software/gawk/manual/gawk.html`]

https://likegeeks.com/awk-command/[`https://likegeeks.com/awk-command/`]

*GNU Awk Learn by Example* - https://learnbyexample.github.io/learn_gnuawk/[`https://learnbyexample.github.io/learn_gnuawk/`]

*Awk State Machine Parser Pattern* - https://two-wrongs.com/awk-state-machine-parser-pattern.html[`https://two-wrongs.com/awk-state-machine-parser-pattern.html`]

=====
A domain-specific language designed for text processing and typically used as a data extraction and reporting tool. Like sed and grep, it is a filter, and is a standard feature of most Unix-like operating systems. 

The AWK language is a data-driven scripting language consisting of a set of actions to be taken against streams of textual data – either run directly on files or used as part of a pipeline – for purposes of extracting or transforming text, such as producing formatted reports. The language extensively uses the string datatype, associative arrays (that is, arrays indexed by key strings), and regular expressions.
=====

=== gawk

https://www.gnu.org/software/gawk/[`https://www.gnu.org/software/gawk/`]

https://www.gnu.org/software/gawk/manual/[`https://www.gnu.org/software/gawk/manual/`]

https://www.gnu.org/software/gawk/manual/gawkinet/[`https://www.gnu.org/software/gawk/manual/gawkinet/`]

=====
The GNU implementation of awk is called gawk; if you invoke it with the proper options or environment variables, it is fully compatible with the POSIX1 specification of the awk language and with the Unix version of awk maintained by Brian Kernighan. This means that all properly written awk programs should work with gawk.
This is the only implementation that makes serious progress implementing internationalization and localization and TCP/IP networking.
=====

==== gawlextlib

http://gawkextlib.sourceforge.net/[`http://gawkextlib.sourceforge.net/`]

=====
The gawkextlib project provides several shared library extension packages for gawk, as well as a gawkextlib base library containing some extension API additions, useful for extension packages. These extension libraries require the use of gawk (GNU Awk) version 4.1.1 (API version 1) or later, except for the select and json extensions, which are currently supported only by gawk 4.2 (API version 2) and later.

These libraries enable gawk to process XML data, interact with a PostgreSQL database, use the GD graphics library, and perform unlimited precision MPFR calculations.
=====

=== mawk

https://invisible-island.net/mawk/mawk.html[`https://invisible-island.net/mawk/mawk.html`]

=====
An interpreter for the AWK Programming Language.  The AWK language
is useful for manipulation of data files, text retrieval and
processing,  and  for prototyping and experimenting with algorithms.  mawk
is a new awk meaning it implements the AWK language as defined in  Aho,
Kernighan  and Weinberger, The AWK Programming Language, Addison-Wesley
Publishing, 1988 (hereafter referred to as the AWK  book.)   mawk
conforms to the POSIX 1003.2 (draft 11.3) definition of the AWK language
which contains a few features not described in the AWK book,  and  mawk
provides a small number of extensions.
=====

// BBBB

== bandwhich

https://github.com/imsnif/bandwhich[`https://github.com/imsnif/bandwhich`]

=====
A CLI utility for displaying current network utilization by process, connection and remote IP/hostname.
Bandwhich sniffs a given network interface and records IP packet size, cross referencing it with the /proc filesystem on linux, lsof on macOS, or using WinApi on windows. It is responsive to the terminal window size, displaying less info if there is no room for it. It will also attempt to resolve ips to their host name in the background using reverse DNS on a best effort basis.
=====

== bash

=== bash2py

https://www.swag.uwaterloo.ca/bash2py/index.html[`https://www.swag.uwaterloo.ca/bash2py/index.html`]

=====
 Bash2py is a Bash to Python script translator, implemented by modifying the bash 4.3.30 open-source C code, so that instead of executing bash commands,the modified tool simply emits (to the extent currently possible) the commands seen as equivalent Python statements.

Output may be either directly to a resulting python script (having the same name as the input bash script with a subsequent ".py extension), or to an html page (having the extension .html) that provides a side by side comparison of the input Bash commands and comments, and the corresponding output.

Bash2py is a high level script that permits multiple scripts under a given directory structure to be translated. Bash2pyengine is the actual tool, which when presented with a single Bash script emits the appropriate output. 
=====

=== Bash Infinity

https://github.com/niieani/bash-oo-framework[`https://github.com/niieani/bash-oo-framework`]

=====
Bash Infinity is a standard library and a boilerplate framework for writing tools using bash. It's modular and lightweight, while managing to implement some concepts from C#, Java or JavaScript into bash. The Infinity Framework is also plug & play: include it at the beginning of your existing script to import any of the individual features such as error handling, and start using other features gradually.

The aim of Bash Infinity is to maximize readability of bash scripts, minimize the amount of code repeat and create a central repository for well-written, and a well-tested standard library for bash.

Bash Infinity transforms the often obfuscated "bash syntax" to a cleaner, more modern syntax.
The main modules are:

* automatic error handling with exceptions and visual stack traces (util/exception)
* named parameters in functions (instead of $1, $2...) (util/namedParameters)
* passing arrays and maps as parameters (util/variable)
* try-catch implementation (util/tryCatch)
* throwing custom exceptions (util/exception)
* import keyword for clever sourcing of scripts à la require-js (oo-bootstrap)
* handy aliases for colors and powerline characters to increase readability in the output of your scripts (UI/Color)
* well-formatted, colorful logging to stderr or custom delegate functions (util/log)
* unit test library (util/test)
* standard library for the type system with plenty of useful functions (util/type)
* operational chains for functional programming in bash (util/type)
* type system for object-oriented scripting (util/class)
=====

=== bash-insulter

https://github.com/hkbakke/bash-insulter[`https://github.com/hkbakke/bash-insulter`]

=====
A Bash extension that randomly insults the user when they type the wrong command.
=====

=== bash-it

https://github.com/Bash-it/bash-it[`https://github.com/Bash-it/bash-it`]

=====
A collection of community Bash commands and scripts for Bash 3.2+.
It includes autocompletion, themes, aliases, custom functions, a few stolen pieces from Steve Losh, and more.

Bash-it provides a solid framework for using, developing and maintaining shell scripts and custom commands for your daily work. If you're using the Bourne Again Shell (Bash) regularly and have been looking for an easy way on how to keep all of these nice little scripts and aliases under control, then Bash-it is for you.
=====

=== Bash-Oneliner

https://github.com/onceupon/Bash-Oneliner[`https://github.com/onceupon/Bash-Oneliner`]

=====
A large collection of useful one-line Bash commands.
=====

=== Bash-Snippets

https://github.com/alexanderepstein/Bash-Snippets[`https://github.com/alexanderepstein/Bash-Snippets`]

=====
A collection of small bash scripts for heavy terminal users.
=====

=== concurrent

https://github.com/themattrix/bash-concurrent[`https://github.com/themattrix/bash-concurrent`]

=====
A Bash function to run tasks in parallel and display pretty output as they complete.
=====

=== DevOps Bash Tools

https://github.com/HariSekhon/DevOps-Bash-tools[`https://github.com/HariSekhon/DevOps-Bash-tools`]

=====
A collection of 550 DevOps shell scripts in an advanced Bash environment.
The collection includes:

* Scripts for many popular DevOps technologies
* Advanced configs for common tools like Git, vim, screen, tmux, PostgreSQL psql etc...
* CI configs for most major Continuous Integration products (see CI builds page)
* CI scripts for a drop-in framework of standard checks to run in all CI builds, CI detection, accounting for installation differences across CI environments, root vs user, virtualenvs etc.
* API scripts auto-handling authentication, tokens and other details to quickly query popular APIs with a few keystrokes just supplying the /path/endpoint
* Advanced Bash environment - .bashrc + .bash.d/*.sh - aliases, functions, colouring, dynamic Git & shell behaviour enhancements, automatic pathing for installations and major languages like Python, Perl, Ruby, NodeJS, Golang across Linux distributions and Mac. See .bash.d/README.md
* Installs the best systems packages - AWS CLI, Azure CLI, GCloud SDK, Terraform, Kubernetes kubectl & kustomize, eksctl, jx, jq etc... extensive package lists for servers and desktops for most major Linux distributions package managers and Mac
* Utility Libraries used by many hundreds of scripts and builds across repos:
** .bash.d/ - interactive library
** lib/ - scripting and CI library
* SQL Scripts - 100+ scripts for PostgreSQL, MySQL, AWS Athena + CloudTrail, Google BigQuery
* Templates - templates for common programming languages and build configs
* Kubernetes Configs - Kubernetes YAML configs for most common scenarios, including Production Best Practices, Tips & Tricks
=====

=== Pure Shell Bible

https://jonlabelle.com/snippets/view/markdown/pure-shell-bible[`https://jonlabelle.com/snippets/view/markdown/pure-shell-bible`]

=====
A collection of pure POSIX sh (Shell) alternatives to external processes.
=====

=== ShellCheck

https://www.shellcheck.net/[`https://www.shellcheck.net/`]

https://github.com/koalaman/shellcheck[`https://github.com/koalaman/shellcheck`]

=====
A tool that gives warnings and suggestions for bash/sh shell scripts.
=====

== bat

https://github.com/sharkdp/bat[`https://github.com/sharkdp/bat`]

=====
A cat clone with additional features such as:

* syntax highlighting for a large number of programming and markup languages,
* git integration to show modification with respect to the index,
* the capability of highlighting non-printable characters, and
* piping of out to a pager (i.e. less) if the output is too large for one screen.
=====

== bcc

https://github.com/iovisor/bcc[`https://github.com/iovisor/bcc`]

http://www.brendangregg.com/ebpf.html[`http://www.brendangregg.com/ebpf.html`]

https://www.iovisor.org/technology/bcc[`https://www.iovisor.org/technology/bcc`]

https://opensource.com/article/17/11/bccbpf-performance[`https://opensource.com/article/17/11/bccbpf-performance`]

https://ebpf.io/projects/[`https://ebpf.io/projects/`]

=====
BCC is a toolkit for creating efficient kernel tracing and manipulation programs, and includes several useful tools and examples. It makes use of extended BPF (Berkeley Packet Filters), formally known as eBPF, a new feature that was first added to Linux 3.15. Much of what BCC uses requires Linux 4.1 and above.
It provides a large collection of tracing examples tools, as well as C, Python, and lua interfaces for developing them.

The tools include:

* `argdist` - trace a function and display a histogram or frequency count of its parameter values
* `bashreadline` - print entered bash commands system wide
* `biolatency` - summarize block device I/O latency as a histogram
* `biosnoop` - trace block device I/O and print details incl. issuing PID
* `biotop` - block device (disk) I/O by process top
* `bitesize` - summarize block device I/O size as a histogram
* `bpflist` - display processes currently using BPF programs and maps
* `btrfsdist` - summarize btrfs operation latency
* `btrfsslower` - trace slow btrfs file operations, with per-event details
* `cachestat` - statistics for linux page cache hit/miss ratios
* `cachetop` - statistics for linux page cache hit/miss ratios per processes
* `capable` - trace security capability checks (cap_capable())
* `[c|java|ruby|tcl|u] - traces object allocations in high-level languages (including "malloc") and prints summaries of the most frequently allocated types by number of objects or number of bytes
* `cpudist` - on- and off-CPU task time as a histogram
* `cpuunclaimed` - sample CPU run queues and calculate unclaimed idle CPU
* `criticalstat` - a tracer to find and report long atomic critical sections in kernel
* `dbslower` - trace MySQL/PostgreSQL server queries slower than a threshold
* `dcsnoop` - trace directory entry cache (dcache) lookups
* `dcstat` - directory entry cache (dcache) stats
* `deadlock` - find potential deadlocks (lock order inversions) in a running program
=====

== bropages

http://bropages.org/[`http://bropages.org/`]

=====
Concise examples for command line programs.  For example, to get examples of
how to use `curl`, enter:

`bro curl`
=====

== broot

https://dystroy.org/broot/[`https://dystroy.org/broot/`]

=====
A utility to see and navigate directory trees.
=====

== btop

https://github.com/aristocratos/btop[`https://github.com/aristocratos/btop`]

=====
Resource monitor that shows usage and stats for processor, memory, disks, network and processes.
The features include:

* Easy to use, with a game inspired menu system.
* Full mouse support, all buttons with a highlighted key is clickable and mouse scroll works in process list and menu boxes.
* Fast and responsive UI with UP, DOWN keys process selection.
* Function for showing detailed stats for selected process.
* Ability to filter processes.
* Easy switching between sorting options.
* Tree view of processes.
* Send any signal to selected process.
* UI menu for changing all config file options.
* Auto scaling graph for network usage.
* Shows IO activity and speeds for disks
* Battery meter
* Selectable symbols for the graphs
=====

== busybox

https://busybox.net/about.html[`https://busybox.net/about.html`]

=====
BusyBox combines tiny versions of many common UNIX utilities into a single small executable. It provides replacements for most of the utilities you usually find in GNU fileutils, shellutils, etc. The utilities in BusyBox generally have fewer options than their full-featured GNU cousins; however, the options that are included provide the expected functionality and behave very much like their GNU counterparts. BusyBox provides a fairly complete environment for any small or embedded system.
=====

== byte-unixbench

https://github.com/kdlucas/byte-unixbench[`https://github.com/kdlucas/byte-unixbench`]

=====
The original BYTE UNIX benchmark suite, updated and revised by many people over the years.

The purpose of UnixBench is to provide a basic indicator of the performance of a Unix-like system; hence, multiple tests are used to test various aspects of the system's performance. These test results are then compared to the scores from a baseline system to produce an index value, which is generally easier to handle than the raw scores. The entire set of index values is then combined to make an overall index for the system.

Some very simple graphics tests are included to measure the 2D and 3D graphics performance of the system.

Multi-CPU systems are handled. If your system has multiple CPUs, the default behaviour is to run the selected tests twice -- once with one copy of each test program running at a time, and once with N copies, where N is the number of CPUs. This is designed to allow you to assess:

* the performance of your system when running a single task
* the performance of your system when running multiple tasks
* the gain from your system's implementation of parallel processing

Do be aware that this is a system benchmark, not a CPU, RAM or disk benchmark. The results will depend not only on your hardware, but on your operating system, libraries, and even compiler.
=====

// CCCC

== catdoc

https://www.wagner.pp.ru/\~vitus/software/catdoc/[`https://www.wagner.pp.ru/~vitus/software/catdoc/`]

=====
A program which reads one or more Microsoft word files and outputs text, contained inside
them to standard output. Therefore it does same work for .doc files, as unix cat command for plain ASCII files. 

It is now accompanied by `xls2csv` - program which converts Excel spreadsheet into
comma-separated value file, and `catppt` - utility to extract textual information from Powerpoint files.
=====

== cdrtools

http://cdrtools.sourceforge.net/private/cdrecord.html[`http://cdrtools.sourceforge.net/private/cdrecord.html`]

https://en.wikipedia.org/wiki/Cdrtools[`https://en.wikipedia.org/wiki/Cdrtools`]

=====
A set of command line programs that allows to record CD/DVD/BluRay media. 
The programs are:

* cdrecord - A CD/DVD/BD recording program 
* readcd - A program to read CD/DVD/BD media with CD-clone features 
* cdda2wav - The most evolved CD-audio extraction program with paranoia support 
* mkisofs - A program to create hybrid ISO9660/JOLIET/HFS filesystes with optional Rock Ridge attributes 
* isodebug - A program to print mkisofs debug information from media 
* isodump - A program to dump ISO-9660 media 
* isoinfo - A program to analyse/verify ISO/9660/Joliet/Rock-Ridge Filesystems 
* isovfy - A program to verify the ISO-9660 structures 
* rscsi - A Remote SCSI enabling daemon 
=====

The `cdrtools` are part of a larger command-line toolset called the Schily Tools.

http://schilytools.sourceforge.net/[`http://schilytools.sourceforge.net/`]

for which the man pages provide the documentation at:

http://schilytools.sourceforge.net/man/man1/index.html[`http://schilytools.sourceforge.net/man/man1/index.html`]

== cdw

http://cdw.sourceforge.net/[`http://cdw.sourceforge.net/`]

=====
A front-end for command-line tools: `cdrecord`/`wodim`, `mkisofs`/`genisoimage`, `growisofs`, `dvd+rw-mediainfo`, `dvd+rw-format`, `xorriso`, `mkudffs`. It utilizes ncurses library to build user-friendly interface and it can be used in UNIX terminal window or in terminal emulator (like konsole, xterm, rxvt or gnome-terminal) in X Window environment. cdw supports ISO9660 filesystem for optical media. creating UDF image files is also possible. 
=====

== chafa

https://github.com/hpjansson/chafa[`https://github.com/hpjansson/chafa`]

https://hpjansson.org/chafa/[`https://hpjansson.org/chafa/`]

=====
hafa is a command-line utility that converts image data, including animated GIFs, into graphics formats or ANSI/Unicode character art suitable for display in a terminal. It has broad feature support, allowing it to be used on devices ranging from historical teleprinters to modern terminal emulators and everything in between.

The features include:

* Supports most popular image formats, including animated GIFs.
* Outputs to all popular terminal graphics formats: Sixels, Kitty, iTerm2, Unicode mosaics.
* Combines Unicode symbols from multiple selectable ranges for optimal output.
* Fullwidth character support, e.g. Chinese, Japanese, Korean.
* Glyphs can be loaded from any font file supported by Freetype (TTF, OTF, PCF, etc).
* Multiple color modes, including Truecolor, 256-color, 16-color and simple FG/BG.
* RGB and DIN99d color spaces for improved color picking.
* Alpha transparency support in any color mode, including in animations.
* Works with most modern and classic terminals and terminal emulators.
* Documented, stable C API.
* Fast & lean: SIMD optimized, multithreaded.
* Suitable for terminal graphics, ANSI art composition and even black & white print.
=====

== cheat.sh

https://github.com/chubin/cheat.sh[`https://github.com/chubin/cheat.sh`]

=====
Unified access to the best community driven cheat sheets repositories of the world.
=====

== climate

https://github.com/adtac/climate[`https://github.com/adtac/climate`]

=====
The ultimate command line tool for Linux. It provides a huge number of command line options for developers to automate their Linux system. This tool can be extremely helpful to learn various unix commands too. There is an option to print each command before they're executed to help you memorize them over time.
=====

== colorpedia

https://github.com/joowani/colorpedia[`https://github.com/joowani/colorpedia`]

=====
Colorpedia is a command-line tool for looking up colors, shades and palettes.
The supported color models are HEX, RGB, HSL, HSV, CMYK.
=====

== conda

=== mamba

https://github.com/mamba-org/mamba[`https://github.com/mamba-org/mamba`]

=====
Mamba is a reimplementation of the conda package manager in C++ whose features include:

* parallel downloading of repository data and package files using multi-threading
* libsolv for much faster dependency solving, a state of the art library used in the RPM package manager of Red Hat, Fedora and OpenSUSE
* core parts of mamba are implemented in C++ for maximum efficiency

At the same time, mamba utilize the same command line parser, package installation and deinstallation code and transaction verification routines as conda to stay as compatible as possible.

Mamba is part of a bigger ecosystem to make scientific packaging more sustainable.
=====

== continual-sync

http://www.ivarch.com/programs/continual-sync.shtml[`http://www.ivarch.com/programs/continual-sync.shtml`]

=====
A tool to synchronise one directory tree with another, with rsync, using the inotify mechanism to keep the copy constantly up to date very efficiently by making rsync do as little work as possible.

It can be used to mirror directories between machines asynchronously, for instance backing up your local files to an off-site file server.

The continual-sync tool is intended to be used in the background - set up once and forgotten about. For example, it can be used to back up hundreds of Linux desktops to a central server with no user interaction, and with changes appearing on the central server within minutes of the originals being changed on the desktop. 
=====

== coreutils

https://en.wikipedia.org/wiki/GNU_Core_Utilities[`https://en.wikipedia.org/wiki/GNU_Core_Utilities`]

https://en.wikipedia.org/wiki/List_of_GNU_Core_Utilities_commands[`https://en.wikipedia.org/wiki/List_of_GNU_Core_Utilities_commands`]

*Command Line Text Processing with GNU coreutils* - https://learnbyexample.github.io/cli_text_processing_coreutils/[`https://learnbyexample.github.io/cli_text_processing_coreutils/`]

=====
A package of GNU containing implementations for many of the basic tools, such as cat, ls, and rm, which are used on Unix-like operating systems. 
In September 2002, the GNU coreutils were created by merging the earlier packages textutils, shellutils, and fileutils, along with some other miscellaneous utilities.
=====

== croc

https://github.com/schollz/croc[`https://github.com/schollz/croc`]

=====
A tool that allows any two computers to simply and securely transfer files and folders. AFAIK, croc is the only CLI file-transfer tool that does all of the following:

* allows any two computers to transfer data (using a relay)
* provides end-to-end encryption (using PAKE)
* enables easy cross-platform transfers (Windows, Linux, Mac)
* allows multiple file transfers
* allows resuming transfers that are interrupted
* local server or port-forwarding not needed
* ipv6-first with ipv4 fallback
* can use proxy, like tor
=====

== curl

https://curl.se/[`https://curl.se/`]

=====
A command line tool and library
for transferring data with URLs.
Curl supports DICT, FILE, FTP, FTPS, GOPHER, GOPHERS, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP. curl supports SSL certificates, HTTP POST, HTTP PUT, FTP uploading, HTTP form based upload, proxies, HTTP/2, HTTP/3, cookies, user+password authentication (Basic, Plain, Digest, CRAM-MD5, SCRAM-SHA, NTLM, Negotiate and Kerberos), file transfer resume, proxy tunneling and more. 
To download a single file and save it with its original filename:

`curl -O https://cdn.jsdelivr.net/npm/vue/dist/vue.js`

To download a single file and save it to a new filename:

`curl -o vue-v2.6.10.js https://cdn.jsdelivr.net/npm/vue/dist/vue.js`

To resume a download that was interrupted and did not finish:

`curl -C - -O https://cdn.jsdelivr.net/npm/vue/dist/vue.js`

To access a protected FTP server:

`curl -u FTP_USERNAME:FTP_PASSWORD ftp://ftp.example.com/`

To download a file from a protected FTP server:

`curl -u FTP_USERNAME:FTP_PASSWORD ftp://ftp.example.com/file.tar.gz`

To upload a file to a protected FTP server:

`curl -T newfile.tar.gz -u FTP_USERNAME:FTP_PASSWORD ftp://ftp.example.com/`

To download a file only if it is modified after a specified time:

`curl -z 21-Dec-11 http://www.example.com/yy.html`
=====

=== curlie

https://github.com/rs/curlie[`https://github.com/rs/curlie`]

=====
If you like the interface of HTTPie but miss the features of curl, curlie is what you are searching for. Curlie is a frontend to curl that adds the ease of use of httpie, without compromising on features and performance. All curl options are exposed with syntax sugar and output formatting inspired from httpie.
=====

== csvkit

https://csvkit.readthedocs.io/en/latest/[`https://csvkit.readthedocs.io/en/latest/`]

=====
A suite of command-line tools for converting to and working with CSV, the king of tabular file formats.
The tools are:

* `in2csv` - converts files formats - including `.xls` and `.xlsx` Excel files, JSON files, and fixed-width
formatted files to CSV

* `sql2csv` - extracts data from an SQL database into a CSV file

* `csvlook` - renders a CSV file to the command line in a Markdown-compatible, fixed-width format

* `csvclean` - cleans a CSV file of common errors

* `csvgrep` - filter tabular data to only those rows where certain columns contain a given value or match a regular expression

* `csvcut` - a `cut` command for tabular data that can filter and truncate CSV files

* `csvjoin` - merges two or more CSV tables using a method analogous to an SQL join operation

* `csvsort` - a `sort` command for tabular data

* `csvstack` - stack the rows from multiple CSV files

* `csvformat` - convert a CSV file to a custom output format

* `csvjson` - convert a CSV file into JSON or GeoJSON

* `csvpy` - loads a CSV file into an `agate.csv.Reader` object and drops into a Python shell

* `csvsql` - generates SQL statements for a CSV file

* `csvstat` - prints descriptive statistics for all columns in a CSV file
=====

== CUDA

https://docs.nvidia.com/cuda/index.html[`https://docs.nvidia.com/cuda/index.html`]

https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html[`https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html`]

https://docs.nvidia.com/cuda/cuda-gdb/index.html[`https://docs.nvidia.com/cuda/cuda-gdb/index.html`]

The command-line tools available in the CUDA toolkit from NVIDIA include:

* `nvcc` - the CUDA compiler driver
* `cuda-gdb` - a tool for debugging CUDA applications
* `cuda-memcheck` - a functional correctness checking suite, which is deprecated as of 2022/10 to be replaced by `compute-sanitizer`
* `compute-sanitizer` - a functional correctness checking suite
* `nvprof` - a tool for collecting and viewing profiling data that is scheduled to be deprecated in favor of
the NVIDA Nsight tools
* `nsys` - the NVIDIA Nsight command-line tool for collecting data with several subcommands for
performing various tasks:
** `profile` - run an application and capture its profile into a QDSTRM file
** `launch` - launch an application ready to be profiled
** `start/stop` - start or stop a profiling session
** `stats` - generate statistics from an existing `nsys-rep` or SQLite file
* `nvdisasm` - a tool for examining and disassembling cubin (CUDA binary) files
* `cuobjdump` - a tool for examining and disassembling both cubin files and host executables
* `nvprune` - prunes host object files and libraries to only contain device code for specified targets
* `cu++filt` - decodes (demangles) low-level identifiers mangled by CUDA C++ into user readable names
* `ptxas` - an optimizing backend compiler that optimizes and assembles PTX source modules to produce corresponding object files

== curseradio

https://github.com/chronitis/curseradio[`https://github.com/chronitis/curseradio`]

=====
Curseradio is a curses interface for browsing and playing an OPML directory of internet radio streams. It is designed to use the tunein directory found at http://opml.radiotime.com/, but could be adapted to others.

Audio playback uses mpv. Curseradio requires python3 and the libraries requests, xdg and lxml.
=====

== curses

https://en.wikipedia.org/wiki/Curses_(programming_library)[`https://en.wikipedia.org/wiki/Curses_(programming_library)`]

=====
A terminal control library for Unix-like systems, enabling the construction of text user interface (TUI) applications.  It is a library of functions that manage an application's display on character-cell terminals (e.g., VT100).

Using curses, programmers are able to write text-based applications without writing directly for any specific terminal type. The curses library on the executing system sends the correct control characters based on the terminal type. It provides an abstraction of one or more windows that maps onto the terminal screen. Each window is represented by a character matrix. The programmer sets up the desired appearance of each window, then tells the curses package to update the screen. The library determines a minimal set of changes that are needed to update the display and then executes these using the terminal's specific capabilities and control sequences.
=====

=== notcurses

https://github.com/dankamongmen/notcurses[`https://github.com/dankamongmen/notcurses`]

https://archive.fosdem.org/2021/schedule/event/notcurses/[`https://archive.fosdem.org/2021/schedule/event/notcurses/`]

=====
What it is: a library facilitating complex TUIs on modern terminal emulators, supporting vivid colors, multimedia, threads, and Unicode to the maximum degree possible. Things can be done with Notcurses that simply can't be done with NCURSES. It is furthermore fast as shit. What it is not: a source-compatible X/Open Curses implementation, nor a replacement for NCURSES on existing systems.
=====

// DDDD

== dasel

https://github.com/TomWright/dasel[`https://github.com/TomWright/dasel`]

=====
Dasel (short for data-selector) allows you to query and modify data structures using selector strings.

Comparable to jq / yq, but supports JSON, YAML, TOML, XML and CSV with zero runtime dependencies.

Say good bye to learning new tools just to work with a different data format.

Dasel uses a standard selector syntax no matter the data format. This means that once you learn how to use dasel you immediately have the ability to query/modify any of the supported data types without any additional tools or effort.
=====

== dat

https://docs.datproject.org/[`https://docs.datproject.org/`]

https://github.com/datproject/dat[`https://github.com/datproject/dat`]

=====
Dat is a protocol for sharing data between computers. Dat’s strengths are that data is hosted and distributed by many computers on the network, that it can work offline or with poor connectivity, that the original uploader can add or modify data while keeping a full history and that it can handle large amounts of data.
=====

== dateutils

http://www.fresse.org/dateutils/[`http://www.fresse.org/dateutils/`]

=====
Dateutils are a bunch of tools that revolve around fiddling with dates and times in the command line with a strong focus on use cases that arise when dealing with large amounts of financial data.
The tools are:

* `strptime` Command line version of the C function
* `dateadd` Add durations to dates or times
* `dateconv` Convert dates or times between calendars
* `datediff` Compute durations between dates or times
* `dategrep` Grep dates or times in input streams
* `dateround` Round dates or times to “fuller” values
* `dateseq` Generate sequences of dates or times
* `datesort` Sort chronologically.
* `datetest` Compare dates or times
* `datezone` Convert date/times to timezones in bulk
=====

== dd

https://en.wikipedia.org/wiki/Dd_(Unix)[`https://en.wikipedia.org/wiki/Dd_(Unix)`]

https://www.geeksforgeeks.org/dd-command-linux/[`https://www.geeksforgeeks.org/dd-command-linux/`]

https://linuxconfig.org/how-dd-command-works-in-linux-with-examples[`https://linuxconfig.org/how-dd-command-works-in-linux-with-examples`]

=====
A command-line utility for Unix and Unix-like operating systems, the primary purpose of which is to convert and copy files.

On Unix, device drivers for hardware (such as hard disk drives) and special device files (such as /dev/zero and /dev/random) appear in the file system just like normal files; dd can also read and/or write from/to these files, provided that function is implemented in their respective driver. As a result, dd can be used for tasks such as backing up the boot sector of a hard drive, and obtaining a fixed amount of random data. The dd program can also perform conversions on the data as it is copied, including byte order swapping and conversion to and from the ASCII and EBCDIC text encodings.
=====

== ddgr

https://github.com/jarun/ddgr[`https://github.com/jarun/ddgr`]

=====
A command-line utility to search DuckDuckGo.
Unlike the web interface, you can specify the number of search results you would like to see per page. It's more convenient than skimming through 30-odd search results per page. The default interface is carefully designed to use minimum space without sacrificing readability.
=====

== ded

https://invisible-island.net/ded/ded.html[`https://invisible-island.net/ded/ded.html`]

=====
This program allows you to navigate through multiple file lists or a directory tree, viewing or changing file attributes rapidly. In addition to conventional file information, it operates on the file's RCS or SCCS archives (or CVS or SVN, etc), making it useful for source-control as well as system administration. Curses-based, it runs on UNIX systems.

The features of ded include:

* ded provides a listing of all of each file's attributes.
* the listing can be sorted by any of the attributes, as well as by useful relationships between the attributes (25 choices).
* ded commands use (like vi) few keystrokes; using it is fast.
* file (and directory) attributes can be edited
* although rarely used, ded allows you to edit the names of files with unusual characters such as escape, carriage return and line-feed.
* multiple files can be selected, and the results of editing file attributes will be applied to every selected file.
* ded provides a fast selection of all files which sort with the same attribute value, e.g., suffix, permissions, size.
* ded provides a directory-tree navigation screen, but also maintains a ring of active file-listings which the user can page through.
* piping a list of filenames to ded makes a custom file-listing which does not have to correspond to a given directory.
* for operations (such as deletion, copying, etc), which are not built into ded, it provides a shell prompt, with substitutions from the current and selected file's attributes such as parts of the filename.
* shell commands are automatically escaped to handle embedded blanks, etc., in filenames.
* adjacent directory-paths can be referenced in shell commands, providing a simple way to move or copy files between directories.
=====

== device-mapper

https://wiki.gentoo.org/wiki/Device-mapper[`https://wiki.gentoo.org/wiki/Device-mapper`]

=====
Normally, users rarely use dmsetup directly. The dmsetup is a very low level, and difficult tool to use. LVM, mdtool or cryptsetup is generally the preferred way to do it, as it takes care of saving the metadata and issuing the dmsetup commands. However, sometimes it is desirable to deal with directly: sometimes for recovery purposes, or to use a target that han't yet been ported to LVM. 

The `dmsetup` command does all the heavily lifting, and its capabilities include:

* `dmsetup create` - activates a new device mapper device
* `dmsetup remove` - deactivates a device mapper device
* `dmsetup message` - sends a message to a device mapper device
* `dmsetup suspend` - stopos any new I/O while allow existing I/O to complete
* `dmsetup resume` - allows I/O to be submitted to a previously suspended device
* `dmsetup reload` - replaces an existing device, possibly with new targets and/or parameters

Two further commands complete the device-mapper set:

* `blkdeactivate` - a utility to deactivate block devices, which attempts to unmount
mounted devices before trying to deactivate them
* `dmstats` - manages I/O statistics regions for devices that use the
device-mapper driver
=====

== dgsh

https://www.spinellis.gr/sw/dgsh/[`https://www.spinellis.gr/sw/dgsh/`]

https://github.com/dspinellis/dgsh[`https://github.com/dspinellis/dgsh`]

=====
The directed graph shell, dgsh, allows the expressive expression of efficient big data set and streams processing pipelines using existing Unix tools as well as custom-built components. It is a Unix-style shell allowing the specification of pipelines with non-linear scatter-gather operations. These form a directed acyclic process graph, which is typically executed by multiple processor cores, thus increasing the operation's processing throughput.
=====

== diffoscope

https://diffoscope.org/[`https://diffoscope.org/`]

=====
diffoscope tries to get to the bottom of what makes files or directories different. It will recursively unpack archives of many kinds and transform various binary formats into more human-readable form to compare them. It can compare two tarballs, ISO images, or PDF just as easily.

File formats supported include: Android APK files, Android boot images, Apple Xcode mobile provisioning files, ar(1) archives, ASM Function, Berkeley DB database files, bzip2 archives, character/block devices, ColorSync colour profiles (.icc), Coreboot CBFS filesystem images, cpio archives, Dalvik .dex files, Debian .buildinfo files, Debian .changes files, Debian source packages (.dsc), Device Tree Compiler blob files, directories, ELF binaries, ext2/ext3/ext4/btrfs/fat filesystems, Flattened Image Tree blob files, FreeDesktop Fontconfig cache files, FreePascal files (.ppu), Gettext message catalogues, GHC Haskell .hi files, GIF image files, Git repositories, GNU R database files (.rdb), GNU R Rscript files (.rds), Gnumeric spreadsheets, GPG keybox databases, Gzipped files, Hierarchical Data Format database, ISO 9660 CD images, Java .class files, Java .jmod modules, JavaScript files, JPEG images, JSON files, Linux kernel images, LLVM IR bitcode files, local (UNIX domain) sockets and named pipes (FIFOs), LZ4 compressed files, macOS binaries, Microsoft Windows icon files, Microsoft Word .docx files, Mono ‘Portable Executable’ files, Mozilla-optimized .ZIP archives, Multimedia metadata, OCaml interface files, Ogg Vorbis audio files, OpenOffice .odt files, OpenSSH public keys, OpenWRT package archives (.ipk), PDF documents, PE32 files, PGP signatures, PGP signed/encrypted messages, PNG images, PostScript documents, Public Key Cryptography Standards (PKCS) files (version #7), Python .pyc files, RPM archives, Rust object files (.deflate), Sphinx inventory files, SQLite databases, SquashFS filesystems, symlinks, tape archives (.tar), tcpdump capture files (.pcap), text files, TrueType font files, U-Boot legacy image files, WebAssembly binary module, XML binary schemas (.xsb), XML files, XMLB files, XZ compressed files, ZIP archives and Zstandard compressed files.
=====

== difftastic

https://github.com/Wilfred/difftastic[`https://github.com/Wilfred/difftastic`]

=====
Difftastic is an experimental diff tool that compares files based on their syntax.
The features include:

* Difftastic understands nesting. It highlights the matching { and }, but understands that foo() hasn't changed despite the leading whitespace.
* Difftastic understands which lines should be aligned. 
* Difftastic understands that line-wrapping isn't meaningful.
=====

== difftest_ng

https://github.com/thorfdbg/difftest_ng[`https://github.com/thorfdbg/difftest_ng`]

=====
Difftest is a program/framework helping to find errors in image
compression algorithms. It allows to measure many error measures
between a reference image and a compressed and re-expanded
image. Error measures are targetted not at human vision, but at
measures that allow to automatically detect common problems in image
codecs.

In addition, difftest_ng includes a couple of convenience functions,
including restricting the measurement only to a single component,
computing the FFT (or weighted FFT), filtering the image, measuring
the histogram and converting between various image formats. Currently,
difftest_ng supports pnm (ppm,pgm,pbm), pgx (JPEG 2000 reference
testing format), bmp, TIFF, multiple of raw formats with very flexible
specifications, pfm, rgbe, png, exr and dpx.
=====

== diskonaut

https://github.com/imsnif/diskonaut[`https://github.com/imsnif/diskonaut`]

=====
Given a path on your hard-drive (which could also be the root path, eg. /). diskonaut scans it and indexes its metadata to memory so that you could explore its contents (even while still scanning!).

Once completed, you can navigate through subfolders, getting a visual treemap representation of what's taking up your disk space. You can even delete files or folders and diskonaut will track how much space you've freed up in this session.
=====

== ditaa

https://github.com/stathissideris/ditaa[`https://github.com/stathissideris/ditaa`]

https://github.com/stathissideris/ditaa[`https://github.com/stathissideris/ditaa`]

=====
A small command-line utility written in Java, that can convert diagrams drawn using ascii art ('drawings' that contain characters that resemble lines like | / - ), into proper bitmap graphics.
`ditaa` interprets ASCII art as a series of open and closed shapes, but it also uses special markup syntax to increase the possibilities of shapes and symbols that can be rendered.
=====

== dnf

https://github.com/rpm-software-management/dnf[`https://github.com/rpm-software-management/dnf`]

=====
Dandified YUM (DNF) is the next upcoming major version of YUM. It does package management using RPM, libsolv and hawkey libraries. For metadata handling and package downloads it utilizes librepo. To process and effectively handle the comps data it uses libcomps.

To install|remove a package from one of the available repositories.  If the given name is not that of a package it
will look up and install|remove a package - if one is available - that contains the program with the given name.

`dnf install|remove bash`

To update a package, or all packages if no package is listed:

`dnf update [package]`

To install a package without weak dependencies not required for basic functionality.

`dnf -y install tito --setopt=install_weak_deps=False`

To install a local RPM file:

`dnf install ~/Downloads/tito-0.6.2-1.fc22.noarch.rpm`

To check for available updates for a package, or for all packages if no packages name is provided.

`dnf check-update [package]`

To obtain a list of installed and available groups:

`dnf group list`

To obtain a list of groups including all hidden groups:

`dnf group list -v hidden`

To obtain a list of the packages available in a specific group:

`dnf group info fonts`

To list enabled repositories, or all repositories with trailing `all`:

`dnf repolist [all]`

To search for a package in the available repositories:

`dnf search net-tools`

To download but not install a package:

`dnf download net-tools`

To list all available packages from repositories:

`dnf list available | more`

To check which package provides a specified function:

`dnf provides crontab`

To obtain details about a specific package:

`dnf info net-tools`

To obtain a transaction history, or more detailed information about one of the numbered transactions:

`dnf history [info 5]`

To list all the files available in a package:

`dnf repoquery -l net-tools`
=====

// EEEE

== e2fsprogs

https://github.com/tytso/e2fsprogs[`https://github.com/tytso/e2fsprogs`]

http://e2fsprogs.sourceforge.net/[`http://e2fsprogs.sourceforge.net/`]

=====
Utilities for use with the ext2/ext3/ext4 filesystems.
=====

-----
/usr/bin/chattr
/usr/bin/fuse2fs
/usr/bin/lsattr
/usr/sbin/badblocks
/usr/sbin/debugfs
/usr/sbin/dumpe2fs
/usr/sbin/e2freefrag
/usr/sbin/e2fsck
/usr/sbin/e2image
/usr/sbin/e2label
/usr/sbin/e2mmpstatus
/usr/sbin/e2undo
/usr/sbin/e4crypt
/usr/sbin/e4defrag
/usr/sbin/filefrag
/usr/sbin/fsck.ext2
/usr/sbin/fsck.ext3
/usr/sbin/fsck.ext4
/usr/sbin/logsave
/usr/sbin/mke2fs
/usr/sbin/mkfs.ext2
/usr/sbin/mkfs.ext3
/usr/sbin/mkfs.ext4
/usr/sbin/mklost+found
/usr/sbin/resize2fs
/usr/sbin/tune2fs
-----

== entr

http://eradman.com/entrproject/[`http://eradman.com/entrproject/`]

http://jvns.ca/blog/2020/06/28/entr/[`http://jvns.ca/blog/2020/06/28/entr/`]

=====
A command line tool that lets you run an arbitrary command every time you change any of a set of specified files.
=====

== epubtopdf

https://github.com/HAKSOAT/EpubToPdf[`https://github.com/HAKSOAT/EpubToPdf`]

=====
Converts epub documents to pdf documents.
=====

== espeak-ng

https://github.com/espeak-ng/espeak-ng[`https://github.com/espeak-ng/espeak-ng`]

https://www.spinellis.gr/blog/20210102/[`https://www.spinellis.gr/blog/20210102/`]

https://github.com/dspinellis/speak[`https://github.com/dspinellis/speak`]

=====
The eSpeak NG is a compact open source software text-to-speech synthesizer for Linux, Windows, Android and other operating systems. It supports more than 100 languages and accents. It is based on the eSpeak engine created by Jonathan Duddington.

eSpeak NG uses a "formant synthesis" method. This allows many languages to be provided in a small size. The speech is clear, and can be used at high speeds, but is not as natural or smooth as larger synthesizers which are based on human speech recordings. It also supports Klatt formant synthesis, and the ability to use MBROLA as backend speech synthesizer.

It includes a command line program (Linux and Windows) to speak text from a file or from stdin,
and a shared library version for use by other programs.
=====

== ethtool

https://mirrors.edge.kernel.org/pub/software/network/ethtool/[`https://mirrors.edge.kernel.org/pub/software/network/ethtool/`]

https://en.wikipedia.org/wiki/Ethtool[`https://en.wikipedia.org/wiki/Ethtool`]

https://www.thegeekstuff.com/2010/10/ethtool-command/[`https://www.thegeekstuff.com/2010/10/ethtool-command/`]

https://linuxhint.com/ethtool_commands_examples/[`https://linuxhint.com/ethtool_commands_examples/`]

=====
A networking utility used to configure Ethernet devices on Linux. ethtool can also be used to find a lot of information about connected Ethernet devices on your Linux computer.
=====

== evenmoreutils

This is evenmoreutils, a collection of command line tools inspired by moreutils. Both complement the standard *NIX toolset (ls, grep, less etc). The name is a reference to the GNU coreutils. The tools are:

* *age*: prints file age in seconds / checks if older/newer than seconds
* *anywait*: like wait, but works on any process in the system
* *ched*: cached run of a command
* *fit*: truncates a stream by fitting it into a certain width
* *hilite*: runs a command, highlight stderr
* *hl*: highlight some expressions on a stream
* *mime*: prints the mimetype of a file (alias for file -bi)
* *nup*: n-up an output from a program
* *p*: runs parallel processes tagging or highlighting their output
* *pad*: pads a stream with whitespaces to fit a certain width
* *randpar*: output a random parameter
* *repeat*: repeats a command, indefinitely or n times
* *untl*: runs a program until it is sucessful
* *whle*: runs a program until it fails
* *sgetopt*: an easier-to-use version of the getopt library
* *easy-getopt*: an easier-to-use version of the getopt command line tool

See also xref:_moreutils[moreutils].

== exa

https://github.com/ogham/exa[`https://github.com/ogham/exa`]

https://the.exa.website/[`https://the.exa.website/`]

=====
A modern replacement for the venerable file-listing command-line program `ls` that ships with Unix and Linux operating systems, giving it more features and better defaults. It uses colours to distinguish file types and metadata. It knows about symlinks, extended attributes, and Git.

The features include:

* different types of file and data will be coloured differently, and the user and group columns will be highlighted for the current user
* it can display a file’s extended attributes, as well as standard filesystem information such as the inode, the number of blocks, and a file’s various dates and times
* queries files in parallel, giving you performance on par with `ls`
* not only is the standard tree tool built-in, but it’ll show you your files’ information alongside the hierarchy
* view the staged and unstaged status of every file in the standard view
* display of an arbitrary number of columns in the terminal
=====

== exodus

https://github.com/intoli/exodus[`https://github.com/intoli/exodus`]

=====
Exodus is a tool that makes it easy to successfully relocate Linux ELF binaries from one system to another. This is useful in situations where you don't have root access on a machine or where a package simply isn't available for a given Linux distribution. For example, CentOS 6.X and Amazon Linux don't have packages for Google Chrome or aria2. Server-oriented distributions tend to have more limited and outdated packages than desktop distributions, so it's fairly common that one might have a piece of software installed on their laptop that they can't easily install on a remote machine.
=====

// FFFF

== fd

https://github.com/sharkdp/fd[`https://github.com/sharkdp/fd`]

=====
An alternative to `fine` to find entries in your filesystem. It is a simple, fast and user-friendly alternative to find. While it does not aim to support all of find's powerful functionality, it provides sensible (opinionated) defaults for a majority of use cases.
The features include:

* Intuitive syntax: fd PATTERN instead of find -iname '*PATTERN*'.
* Regular expression (default) and glob-based patterns.
* Very fast due to parallelized directory traversal.
* Uses colors to highlight different file types (same as ls).
* Supports parallel command execution
* Smart case: the search is case-insensitive by default. It switches to case-sensitive if the pattern contains an uppercase character*.
* Ignores hidden directories and files, by default.
* Ignores patterns from your .gitignore, by default.
=====

== firecracker

http://jvns.ca/blog/2021/01/23/firecracker--start-a-vm-in-less-than-a-second/[`http://jvns.ca/blog/2021/01/23/firecracker--start-a-vm-in-less-than-a-second/`]

https://github.com/shuveb/sparkler[`https://github.com/shuveb/sparkler`]

https://github.com/weaveworks/ignite[`https://github.com/weaveworks/ignite`]

=====
Firecracker is an open source virtualization technology that is purpose-built for creating and managing secure, multi-tenant container and function-based services that provide serverless operational models. Firecracker runs workloads in lightweight virtual machines, called microVMs, which combine the security and isolation properties provided by hardware virtualization technology with the speed and flexibility of containers.

The main component of Firecracker is a virtual machine monitor (VMM) that uses the Linux Kernel Virtual Machine (KVM) to create and run microVMs. Firecracker has a minimalist design. It excludes unnecessary devices and guest-facing functionality to reduce the memory footprint and attack surface area of each microVM. This improves security, decreases the startup time, and increases hardware utilization. Firecracker has also been integrated in container runtimes, for example Kata Containers and Weaveworks Ignite.
=====

== firewalld

https://firewalld.org/[`https://firewalld.org/`]

*Cheat Sheet* - https://www.liquidweb.com/kb/an-introduction-to-firewalld/[`https://www.liquidweb.com/kb/an-introduction-to-firewalld/`]

=====
Firewalld provides a dynamically managed firewall with support for network/firewall zones that define the trust level of network connections or interfaces. It has support for IPv4, IPv6 firewall settings, ethernet bridges and IP sets. There is a separation of runtime and permanent configuration options. It also provides an interface for services or applications to add firewall rules directly.
=====

== frp

https://github.com/fatedier/frp[`https://github.com/fatedier/frp`]

=====
A fast reverse proxy to help you expose a local server behind a NAT or firewall to the Internet. As of now, it supports TCP and UDP, as well as HTTP and HTTPS protocols, where requests can be forwarded to internal services by domain name.  
frp also has a P2P connect mode.
=====

== fscrypt

https://github.com/google/fscrypt[`https://github.com/google/fscrypt`]

=====
A high-level tool for the management of Linux filesystem encryption. fscrypt manages metadata, key generation, key wrapping, PAM integration, and provides a uniform interface for creating and modifying encrypted directories.

To use fscrypt, you must have a filesystem with encryption enabled and a kernel that supports reading/writing from that filesystem. Currently, ext4, F2FS, and UBIFS support Linux filesystem encryption.
=====

== fselect

https://github.com/jhspetersson/fselect[`https://github.com/jhspetersson/fselect`]

=====
A command line tool for going beyond 'find' and 'ls'.  The features include:

* SQL-like (not real SQL, but highly relaxed!) grammar easily understandable by humans
* complex queries
* aggregate, statistics, date, and other functions
* search within archives
* .gitignore, .hgignore, and .dockerignore support (experimental)
* search by width and height of images, EXIF metadata
* search by MP3 info
* search by extended file attributes
* search by file hashes
* search by MIME type
* shortcuts to common file types
* interactive mode
* various output formatting (CSV, JSON, and others)
=====

== fstools

https://fex.belwue.de/fstools/index.html[`https://fex.belwue.de/fstools/index.html`]

=====
Several dozen shell tools written in Perl.
This is a list of only a few of several dozen available.

* `abspath` - show absolute path of a file
* `ax` - list and (save) extract `.tar`, `.tar.gz`, `.tgz`, `.tar.bz2` and `.zip` archives
* `clp` - a command-line Perl shell for one-line scripting, testing and development
* `cpal` - copy or move files recursively using hard links, optionally overwriting existing files
* `epoch` - print UNIX epoch seconds or convert ISO date-string to epoch
* `extract` - extract lines from a file from one line number to another
* `fstat` - print file (or directory) status information

The same site has a list of other Linux tools at:

http://fex.belwue.de/linuxtools/index.html[`http://fex.belwue.de/linuxtools/index.html`]

These include:

* `diskcheck` - check health status of SATA and SAS disks
* `diskzero` - guided erasing of a disk by overwriting it with NULL bytes
* `ethinfo` - show information about Ethernet interfaces
* `linuxclone` - make a bootable clone of your running Linux system onto a second (USB) disk
* `lshd` - list hard disks and partitions
* `rescue_mount` - mounts a (non-bootabale, damaged) partition for interactive GRUB rescue
* `usbmount` - mount any USB mass storage partitions
=====

== fzf

https://github.com/junegunn/fzf[`https://github.com/junegunn/fzf`]

=====
A general-purpose command-line fuzzy finder.
It's an interactive Unix filter for command-line that can be used with any list; files, command history, processes, hostnames, bookmarks, git commits, etc.
=====

=== sysz

https://github.com/joehillen/sysz[`https://github.com/joehillen/sysz`]

=====
A fzf terminal UI for systemctl.  The features include:

* See and filter both system and user units simultaneously.
* Supports all unit types.
* Units ordered by service, timer, socket, and the rest.
* Runs sudo automatically and only if necessary.
* Filter units by state using ctrl-s or the --state option.
* Run daemon-reload with ctrl-r.
* Has short versions of systemctl commands to reduce typing.
=====

// GGGG

== gallery-dl

https://github.com/mikf/gallery-dl[`https://github.com/mikf/gallery-dl`]

=====
A command-line program to download image galleries and collections from several image hosting sites.
=====

== glances

https://github.com/nicolargo/glances[`https://github.com/nicolargo/glances`]

=====
Glances is a cross-platform monitoring tool which aims to present a large amount of monitoring information through a curses or Web based interface. The information dynamically adapts depending on the size of the user interface.
It can also work in client/server mode. Remote monitoring could be done via terminal, Web interface or API (XML-RPC and RESTful). Stats can also be exported to files or external time/value databases.
Glances is written in Python and uses libraries to grab information from your system. It is based on an open architecture where developers can add new plugins or exports modules.
=====

== gnuit

https://www.gnu.org/software/gnuit/[`https://www.gnu.org/software/gnuit/`]

=====
A set of interactive text-mode tools, closely integrated with the shell. It contains an extensible file system browser, an ascii/hex file viewer, a process viewer/killer and some other related utilities and shell scripts.

It can be used to increase the speed and efficiency of most of the daily tasks such as copying and moving files and directories, invoking editors, compressing and uncompressing files, creating and expanding archives, compiling programs, sending mail, etc. It looks nice, has colors (if the standard ANSI color sequences are supported) and is user-friendly.

One of the main advantages of gnuit is its flexibility. It is not limited to a given set of commands. The configuration file can be easily enhanced, allowing the user to add new commands or file operations, depending on its needs or preferences. The tools are:

* `gitfm` - a file system browser with some shell like features designed to make your work much easier and much efficient
* `gitps` - an interactive process viewer/killer
* `gitview` - an ASCII/HEX file viewer
* `gitkeys` - displays the key sequence sent by a pressed key
* `gitwipe` - a utility for wiping files that overwrites the file contents with a random sequence of numbers and then calls `sync`
* `gitmount` - a script that allows you to mount a list of block devices (specified in the command line), without specifying the file system type
* `gitaction` - a script that executes a different action for each file type specified
* `gitunpack` - a shell script that accepts a directory and a set of archives as its command line parameters, and then attempts to unpack those archives in the given directory, selecting the utility used to unpack the archives based on the archive extensions
* `gitrgrep` - a very small script that calls `grep` recursively
=====

== graphtage

https://github.com/trailofbits/graphtage[`https://github.com/trailofbits/graphtage`]

=====
Graphtage is a commandline utility and underlying library for semantically comparing and merging tree-like structures, such as JSON, XML, HTML, YAML, plist, and CSS files. Its name is a portmanteau of “graph” and “graftage”—the latter being the horticultural practice of joining two trees together such that they grow as one.

Graphtage performs is analysis on an intermediate representation of the tre1Ges that is divorced from the filetypes of the input files. This means, for example, that you can diff a JSON file against a YAML file. Also, the output format can be different from the input format(s). By default, Graphtage will format the output diff in the same file format as the first input file. But one could, for example, diff two JSON files and format the output in YAML.
=====

== grep

https://zwischenzugs.com/2022/02/02/grep-flags-the-good-stuff/[`https://zwischenzugs.com/2022/02/02/grep-flags-the-good-stuff/`]

Commonly used grep flags:

* `-A[N]` - gives you N lines after the match
* `-B[N]` - gives you N lines before the match
* `-C[N]` - gives you N line both before and after the match
* `-i` - ignore the case of the match
* `-V` - matches lines that don't match the regular expression
* `-w` - returns only whole-word matches
* `-h` - suppresses the prefixing of filenames on output if searching multiple files
* `-o` - outputs only the text specified by the regular expression
* `-l` - returns filenames but not the matches within the files
* `-r` - recursive matching
* `-I` - limits searching to text files
* `-E` - allows extended regular expressions, e.g. those containing + signs

=== ack

https://beyondgrep.com/[`https://beyondgrep.com/`]

=====
A grep-like source code search tool.
Designed for programmers with large heterogeneous trees of source code, ack is written in portable Perl 5 and takes advantage of the power of Perl's regular expressions.
=====

=== ag

https://github.com/ggreer/the_silver_searcher[`https://github.com/ggreer/the_silver_searcher`]

=====
A code searching tool similar to ack, with a focus on speed.
=====

=== agrep

https://github.com/Wikinaut/agrep[`https://github.com/Wikinaut/agrep`]

https://www.tgries.de/agrep/[`https://www.tgries.de/agrep/`]

=====
Approximate GREP for fast fuzzy string searching. Files are searched for a string or regular expression, with approximate matching capabilities and user-definable records.
=====

=== bgrep

https://github.com/tmbinc/bgrep[`https://github.com/tmbinc/bgrep`]

=====
I'm terribly annoyed by the fact that grep(1) cannot look for binary
strings. I'm even more annoyed by the fact that a simple search for 
"binary grep" doesn't yield a tool which could do that. So I wrote one.
=====

=== blush

https://github.com/arsham/blush[`https://github.com/arsham/blush`]

=====
With Blush, you can grep with any colours of your choice.
=====

=== gf

https://github.com/tomnomnom/gf[`https://github.com/tomnomnom/gf`]

=====
A wrapper around grep to avoid typing common patterns.  For example, the
command:

`grep -HnrE '(\$_(POST|GET|COOKIE|REQUEST|SERVER|FILES)|php://(input|stdin))' *`

becomes:

`gf php-sources`

This is done by storing pattern definitions in `~/.gf`, with the pattern for this example being:

-----
{
    "flags": "-HnrE",
    "pattern": "(\\$_(POST|GET|COOKIE|REQUEST|SERVER|FILES)|php://(input|stdin))"
}
-----

=====

=== grab

https://github.com/stealth/grab[`https://github.com/stealth/grab`]

=====
An experimental, parallel version of grep to test various strategies to speed up access to large directory trees. On Flash storage or SSDs, you can easily outsmart common greps by up a factor of 8.
Grab uses the pcre library, so basically its equivalent to a grep -P -a. The -P is important, since Perl-Compatible Regular Expressions have different characteristics than basic regexes.

There are two branches. master and greppin. Master is the 'traditional' grab that should compile and run on most POSIX systems. greppin comes with its own optimized and parallelized version of nftw() and readdir(), which again doubles speed on the top of speedup that the master branch already provides. The greppin branch runs on Linux, BSD and OSX. greppin also comes with support for Intel's hyperscan libraries that try to exploit CPU's SIMD instructions if possible (AVX2, AVX512 etc.) when compiling the regex pattern into JIT code.
=====

=== QTGrep

http://www.quiktrim.org/QTgrep.html[`http://www.quiktrim.org/QTgrep.html`]

=====
A combination of the GNU grep, egrep and fgrep functionalities with the expanded capability of searching for multiple regular expressions and/or fixed strings and optionally replacing strings found. Several different search algorithms are utilized and the appropriate algorithm is chosen automatically. Search/replace operations may be performed. 
=====

=== ripgrep

https://github.com/BurntSushi/ripgrep[`https://github.com/BurntSushi/ripgrep`]

*GNU grep and ripgrep: The Search Is On* - https://learnbyexample.github.io/learn_gnugrep_ripgrep/[`https://learnbyexample.github.io/learn_gnugrep_ripgrep/`]

=====
A command line tool that searches your files for patterns that you give it. ripgrep behaves as if reading each file line by line. If a line matches the pattern provided to ripgrep, then that line will be printed. If a line does not match the pattern, then the line is not printed.

ripgrep is a line-oriented search tool that recursively searches your current directory for a regex pattern. By default, ripgrep will respect your .gitignore and automatically skip hidden files/directories and binary files.
=====

==== rga

https://github.com/phiresky/ripgrep-all[`https://github.com/phiresky/ripgrep-all`]

=====
A line-oriented search tool that allows you to look for a regex in a multitude of file types. rga wraps the awesome ripgrep and enables it to search in pdf, docx, sqlite, jpg, movie subtitles (mkv, mp4), etc.
=====

=== sack

https://github.com/sampson-chen/sack[`https://github.com/sampson-chen/sack`]

=====
A faster way to use ag, ack or grep.
The ag / sack / sgrep commands act as wrappers for ag / ack / grep to provide convenience for the repetitive menial tasks when searching through codebases via the command line.
=====

=== sift

https://github.com/svent/sift[`https://github.com/svent/sift`]

=====
A fast and powerful open source alternative to grep.
sift has a slightly different focus than most other grep alternatives. Code search, log search / digital forensics and data processing are the main use cases, but the primary goal is to provide safe defaults and to make it easily configurable for a specific use case.
=====

=== ugrep

https://github.com/Genivia/ugrep[`https://github.com/Genivia/ugrep`]

=====
The features include:

* Ultra fast with new match algorithms and features beating grep, ripgrep, silver searcher, ack, sift, etc.
* Written in clean and efficient C++11 for advanced features and speed, thoroughly tested
* Supports all GNU/BSD grep standard options; ugrep is a faster compatible replacement for GNU/BSD grep
* Matches Unicode patterns by default in UTF-8, UTF-16, UTF-32 encoded files
* Matches multiple lines with \n and \R regex patterns
* Built-in help via `ugrep --help`
* User-friendly with sensible defaults and customizable configuration files
* Interactive query TUI, press F1 or CTRL-Z for help and TAB/SHIFT-TAB to navigate to dirs and files
* Find approximate pattern matches with fuzzy search
* Search with Google-like Boolean query patterns
* Fzf-like search with regex (or fixed strings with -F), fuzzy matching with up to 4 extra characters with -Z+4 and words only with -w, using --files --bool for file-wide Boolean searches
* Search the contents of archives (cpio, jar, tar, pax, zip) and compressed files (zip, gz, Z, bz, bz2, lzma, xz, lz4, zstd)
* Search pdf, doc, docx, xls, xlxs, and more using filters
* Search binary files and display hexdumps with binary pattern matches (Unicode text or -U for byte patterns)
* Include files to search by filename extensions or exclude them
* Include files to search by file types or file "magic bytes" or exclude them
* Include files and directories to search that match gitignore-style globs or exclude them
* Use predefined regex patterns to search source code, javascript, XML, JSON, HTML, PHP, markdown, etc.
* Output results in CSV, JSON, XML, and user-specified formats
=====

=== vgrep

https://github.com/vrothberg/vgrep[`https://github.com/vrothberg/vgrep`]

=====
A pager for grep, git-grep, ripgrep and similar grep implementations, and allows for opening the indexed file locations in a user-specified editor such as vim or emacs. vgrep is inspired by the ancient cgvg scripts but extended to perform further operations such as listing statistics of files and directory trees or showing the context lines before and after the matches.
=====

== grex

https://github.com/pemistahl/grex[`https://github.com/pemistahl/grex`]

=====
A library as well as a command-line utility that is meant to simplify the often complicated and tedious task of creating regular expressions. It does so by automatically generating a single regular expression from user-provided test cases. The resulting expression is guaranteed to match the test cases which it was generated from.
=====

== grok

https://github.com/GrokImageCompression/grok[`https://github.com/GrokImageCompression/grok`]

=====
An open source JPEG 2000 codec.  The features include:

* support for new High Throughput JPEG 2000 (HTJ2K) standard
* fast random-access sub-image decoding using TLM and PLT markers
* full encode/decode support for ICC colour profiles
* full encode/decode support for XML,IPTC, XMP and EXIF meta-data
* full encode/decode support for monochrome, sRGB, palette, YCC, extended YCC, CIELab and CMYK colour spaces
* full encode/decode support for JPEG,PNG,BMP,TIFF,RAW,PNM and PAM image formats
* full encode/decode support for 1-16 bit precision
=====

== gron

https://github.com/TomNomNom/gron[`https://github.com/TomNomNom/gron`]

=====
gron transforms JSON into discrete assignments to make it easier to grep for what you want and see the absolute 'path' to it. It eases the exploration of APIs that return large blobs of JSON but have terrible documentation.  gron can work backwards too, enabling you to turn your filtered data back into JSON.
=====

== gsocket

https://github.com/hackerschoice/gsocket[`https://github.com/hackerschoice/gsocket`]

https://www.gsocket.io/[`https://www.gsocket.io/`]

=====
The Global Socket Tookit allows two users behind NAT/Firewall to establish a secure TCP connection with each other.
=====

// HHHH

== hardinfo

https://github.com/lpereira/hardinfo[`https://github.com/lpereira/hardinfo`]

https://itsfoss.com/hardinfo/[`https://itsfoss.com/hardinfo/`]

https://linuxhint.com/hardinfo-check-hardware-information-linux/[`https://linuxhint.com/hardinfo-check-hardware-information-linux/`]

=====
A system profiler and benchmark for Linux systems. It is able to obtain information from both hardware and basic software, and organize it in a simple to use GUI.
The features include:

* Report generation (in either HTML or plain text)
* Benchmark result synchronization
* Ability to explore the information on remote computers

HardInfo currently detects most software and hardware detected by the OS.
=====

== hasciicam

https://github.com/jaromil/hasciicam/[`https://github.com/jaromil/hasciicam/`]

=====
Hasciicam makes it possible to have live ascii video on the web. It captures video from a tv card and renders it into ascii, formatting the output into an html page with a refresh tag or in a live ascii window or in a simple text file as well, giving the possiblity to anybody that has a bttv card. a linux box and a cheap modem line to show a live asciivideo feed that can be browsable without any need for plugin, java etc.
=====

== HDF5

https://www.hdfgroup.org/solutions/hdf5/[`https://www.hdfgroup.org/solutions/hdf5/`]

=====
The command-line tools built along with the HDF5 libraries are:

* `gif2h5/h52gif` - Converts to/from GIF file and HDF5
* `h5cc/h5pcc/h5fc/h5pfc/h5c++` - Helper scripts for compiling an HDF5 application
* `h5check` - Verifies that an HDF5 file is encoded according to the HDF5 specification
* `h5clear` - Clears superblock status_flags field, removes metadata cache image, prints EOA and EOF, or sets EOA of a file
* `h5copy` - Copies objects to a new HDF5 file
* `h5debug` - Debugs an existing HDF5 file at a low level
* `h5diff` - Compares two HDF5 files and reports the differences
* `h5dump` - Enables the user to examine the contents of an HDF5 file and dump those contents to an ASCII file
* `h5format_convert` - Converts the layout format version and chunked indexing types of datasets created with HDF5-1.10 so applications built with HDF5-1.8 can access them
* `h5import` - Imports ASCII or binary data into HDF5
* `h5jam/h5unjam` - Add/Remove text to/from User Block at the beginning of an HDF5 file
* `h5ls` - Lists selected information about file objects in the specified format
* `h5mkgrp` - Makes a group in an HDF5 file
* `h5perf` - Measures Parallel HDF5 performance
* `h5perf_serial` - Measures HDF5 serial performance
* `h5redeploy` - Updates HDF5 compiler tools' paths after the HDF5 software has been installed in a new location
* `h5repack` - Copies an HDF5 file to a new file with or without compression/chunking
* `h5repart` - Repartitions a file or family of files
* `h5stat` - Displays object and metadata information for an HDF5 file
* `h5watch` - Outputs new records appended to a dataset as the dataset grows
=====

== herbie

https://github.com/uwplse/herbie[`https://github.com/uwplse/herbie`]

https://herbie.uwplse.org/[`https://herbie.uwplse.org/`]

=====
Finds and fixes floating-point problems.
Herbie detects inaccurate expressions and finds more accurate replacements.
=====

== hexyl

https://github.com/sharkdp/hexyl[`https://github.com/sharkdp/hexyl`]

=====
A simple hex viewer for the terminal. It uses a colored output to distinguish different categories of bytes (NULL bytes, printable ASCII characters, ASCII whitespace characters, other ASCII characters and non-ASCII).
=====

== highlight

http://www.andre-simon.de/doku/highlight/en/highlight.php[`http://www.andre-simon.de/doku/highlight/en/highlight.php`]

=====
Highlight converts sourcecode to HTML, XHTML, RTF, LaTeX, TeX, SVG, BBCode and terminal escape sequences with coloured syntax highlighting. Language definitions and colour themes are customizable. 

Highlight was designed to offer a flexible but easy to use syntax highlighter for several output formats. Instead of hardcoding syntax or colouring information, all relevant data is stored in configuration scripts. These scripts may be altered or enhanced with plug-in scripts. 

The features include:

* highlighting of keywords, types, strings, numbers, escape sequences, comments, operators and preprocessor directives
* coloured output in HTML, XHTML 1.1, RTF, TeX, LaTeX, SVG, BBCode and terminal escape sequences
* supports referenced stylesheet files for HTML, LaTeX, TeX or SVG output
* syntax elements are defined as Regular Expressions or plain string lists
* customizable keyword groups
* recognition of nested languages within a file
* all configuration files are Lua scripts
* supports plug-in scripts to tweak language definitions and themes
* reformatting and indentation of C, C++, C# and Java source code
* wrapping of long lines
* configurable output of line numbers
=====

== historian

https://github.com/jcsalterego/historian[`https://github.com/jcsalterego/historian`]

=====
Command-line utility for managing shell history in a SQLite database.
=====

== howdoi

https://github.com/gleitz/howdoi[`https://github.com/gleitz/howdoi`]

=====
Instant coding answers via the command line.
=====

== hping

https://github.com/antirez/hping[`https://github.com/antirez/hping`]

=====
hping3 is a network tool able to send custom TCP/IP
packets and to display target replies like ping do with
ICMP replies. hping3 can handle fragmentation, and
almost arbitrary packet size and content, using the
command line interface.
Since version 3, hping implements scripting capabilties.

As a command line utility, hping is useful to test at
many kind of networking devices like firewalls, routers,
and so. It can be used as a traceroute alike program over all
the supported protocols, firewalk usage, OS fingerprinting,
port-scanner (see the --scan option introduced with hping3),
TCP/IP stack auditing.
=====

== html-xml-utils

https://www.w3.org/Tools/HTML-XML-utils/[`https://www.w3.org/Tools/HTML-XML-utils/`]

-----
A number of simple utilities for manipulating HTML and XML files.
They are:

cexport (1)          - create headerfile of exported declarations from a C file
hxaddid (1)          - add ID's to selected elements
hxcite (1)           - replace bibliographic references by hyperlinks
hxcite-mkbib (1)     - expand references and create bibliography
hxcopy (1)           - copy an HTML file while preserving relative links
hxcount (1)          - count elements and attributes in HTML or XML files
hxextract (1)        - extract selected elements
hxclean (1)          - apply heuristics to correct an HTML file
hxprune (1)          - remove marked elements from an HTML file
hxincl (1)           - expand included HTML or XML files
hxindex (1)          - create an alphabetically sorted index
hxmkbib (1)          - create bibliography from a template
hxmultitoc (1)       - create a table of contents for a set of HTML files
hxname2id            - move some ID= or NAME= from A elements to their parents
hxnormalize (1)      - pretty-print an HTML file
hxnum (1)            - number section headings in an HTML file
hxpipe (1)           - convert XML to a format easier to parse with Perl or AWK
hxprintlinks (1)     - number links & add table of URLs at end of an HTML file
hxremove (1)         - remove selected elements from an XML file
hxtabletrans (1)     - transpose an HTML or XHTML table
hxtoc (1)            - insert a table of contents in an HTML file
hxuncdata (1)        - replace CDATA sections by character entities
hxunent (1)          - replace HTML predefined character entities to UTF-8
hxunpipe (1)         - convert output of pipe back to XML format
hxunxmlns (1)        - replace "global names" by XML Namespace prefixes
hxwls (1)            - list links in an HTML file
hxxmlns (1)          - replace XML Namespace prefixes by "global names"
asc2xml, xml2asc (1) - convert between UTF8 and &#nnn; entities
hxref (1)            - generate cross-references
hxselect (1)         - extract elements that match a (CSS) selector
-----

== httpie

https://github.com/httpie/httpie[`https://github.com/httpie/httpie`]

=====
A command-line HTTP client. Its goal is to make CLI interaction with web services as human-friendly as possible. HTTPie is designed for testing, debugging, and generally interacting with APIs & HTTP servers. The http & https commands allow for creating and sending arbitrary HTTP requests. They use simple and natural syntax and provide formatted and colorized output.
=====

== hwinfo

https://github.com/openSUSE/hwinfo[`https://github.com/openSUSE/hwinfo`]

https://ostechnix.com/find-linux-system-hardware-information-with-hwinfo/[`https://ostechnix.com/find-linux-system-hardware-information-with-hwinfo/`]

=====
Hwinfo probes for the hardware present in a Linux system and displays the extensive details of each hardware device. If you think the details are too much to comprehend, Hwinfo provides an option to display the abbreviated output. It uses libhd.so library to gather details of almost all hardware such as BIOS, CPU, Architecture, Memory, Hard Disk(s), Partitions, Camera, Bluetooth, CD/DVD drives, Keyboard/Mouse, Graphics card, Monitor, Modem, Scanner, Printer, PCI, IDE, SCSI, Sound card, Network interface card, USB and a lot more.
=====

== hwloc

https://www.open-mpi.org/projects/hwloc/[`https://www.open-mpi.org/projects/hwloc/`]

=====
The Portable Hardware Locality (hwloc) software package provides a portable abstraction (across OS, versions, architectures, ...) of the hierarchical topology of modern architectures, including NUMA memory nodes, sockets, shared caches, cores and simultaneous multithreading. It also gathers various system attributes such as cache and memory information as well as the locality of I/O devices such as network interfaces, InfiniBand HCAs or GPUs. 
=====

== hyperfine

https://github.com/sharkdp/hyperfine[`https://github.com/sharkdp/hyperfine`]

=====
A command-line benchmarking tool. The features are:

* Statistical analysis across multiple runs.
* Support for arbitrary shell commands.
* Constant feedback about the benchmark progress and current estimates.
* Warmup runs can be executed before the actual benchmark.
* Cache-clearing commands can be set up before each timing run.
* Statistical outlier detection to detect interference from other programs and caching effects.
* Export results to various formats: CSV, JSON, Markdown, AsciiDoc.
* Parameterized benchmarks (e.g. vary the number of threads).
=====

// IIII

== icdiff

https://github.com/jeffkaufman/icdiff[`https://github.com/jeffkaufman/icdiff`]

https://www.jefftk.com/icdiff[`https://www.jefftk.com/icdiff`]

=====
Improved, colored diff.
=====

== internetarchive

https://github.com/jjjake/internetarchive[`https://github.com/jjjake/internetarchive`]

https://archive.org/services/docs/api/internetarchive/[`https://archive.org/services/docs/api/internetarchive/`]

=====
This package installs a command-line tool named ia for using Archive.org from the command-line. It also installs the internetarchive Python module for programatic access to archive.org. 
=====

== inxi

https://github.com/smxi/inxi[`https://github.com/smxi/inxi`]

https://smxi.org/docs/inxi.htm[`https://smxi.org/docs/inxi.htm`]

https://www.tecmint.com/inxi-command-to-find-linux-system-information/[`https://www.tecmint.com/inxi-command-to-find-linux-system-information/`]

https://ostechnix.com/how-to-find-your-system-details-using-inxi/[`https://ostechnix.com/how-to-find-your-system-details-using-inxi/`]

=====
A command line system information script built for console and IRC. It is also used a debugging tool for forum technical support to quickly ascertain users' system configurations and hardware. inxi shows system hardware, CPU, drivers, Xorg, Desktop, Kernel, gcc version(s), Processes, RAM usage, and a wide variety of other useful information.
=====

== iproute2

https://wiki.linuxfoundation.org/networking/iproute2[`https://wiki.linuxfoundation.org/networking/iproute2`]

https://lwn.net/Articles/710533/[`https://lwn.net/Articles/710533/`]

http://www.policyrouting.org/iproute2.doc.html[`http://www.policyrouting.org/iproute2.doc.html`]

https://www.kernel.org/doc/html/latest/networking/devlink/index.html[`https://www.kernel.org/doc/html/latest/networking/devlink/index.html`]

https://en.wikipedia.org/wiki/Netlink[`https://en.wikipedia.org/wiki/Netlink`]

https://en.wikipedia.org/wiki/Remote_direct_memory_access[`https://en.wikipedia.org/wiki/Remote_direct_memory_access`]

https://www.linuxjournal.com/article/8498[`https://www.linuxjournal.com/article/8498`]

https://en.wikipedia.org/wiki/Transparent_Inter-process_Communication[`https://en.wikipedia.org/wiki/Transparent_Inter-process_Communication`]

=====
A collection of userspace utilities for controlling and monitoring various aspects of networking in the Linux kernel, including routing, network interfaces, tunnels, traffic control, and network-related device drivers. 
 Some of the iproute2 utilities are often recommended over now-obsolete net-tools utilities that provide the same functionality. 

* `arpd` - userspace daemon that collects gratuitous ARP information, saving it on local disk and feeding it to the kernel  on  demand to avoid redundant broadcasting due to limited size of the kernel ARP cache
it on local disk and feeding it to the kernel  on  demand
* `bridge` - for showing/manipulating bridge addresses and devices
* `ctstat` - apparently an alias for `lnstat`
* `devlink` - a tool for using the devlink API that exposes device information and resources not directly related to any
device class
* `genl` - a simple frontend to the generic netlink library
* `ifcfg` - a simple script that replaces `ifconfig` IP management
* `ifstat` - a utility that neatly prints network interface statistics
* `ip` - a command for showing/manipulating routing, network devices, interfaces and tunnels
* `lnstat` - a generalized and more feature-complete replacement for `rstat` used to periodically
print a selection of statistics exported by the kernel
* `nstat` and `rtacct` - tools to monitor kernel SNMP counters and network interface statistics
* `rdma` - a RDMA tool
* `routel` and `routef` - scripts to use instead of raw iproute2 commands to list routes with
pretty output and flush routes, respectively
* `rtmon` - listens to and monitors RTnetlink
* `rtpr` - replaces backslashes with newlines
* `rtstat` - apparently an alias for `lnstat`
* `ss` - a utility used to dump socket statistics similar to `netstat`
* `tipc` - a TIPC configuration and management tool
=====

== iredis

https://github.com/laixintao/iredis[`https://github.com/laixintao/iredis`]

=====
IRedis is a terminal client for redis with auto-completion and syntax highlighting. IRedis lets you type Redis commands smoothly, and displays results in a user-friendly format.
=====

// JJJJ

== jc

https://github.com/kellyjonbrazil/jc[`https://github.com/kellyjonbrazil/jc`]

https://blog.kellybrazil.com/2019/11/26/bringing-the-unix-philosophy-to-the-21st-century/[`https://blog.kellybrazil.com/2019/11/26/bringing-the-unix-philosophy-to-the-21st-century/`]

https://blog.kellybrazil.com/2022/03/26/a-new-way-to-parse-plain-text-tables/[`https://blog.kellybrazil.com/2022/03/26/a-new-way-to-parse-plain-text-tables/`]

=====
JSONifies the output of many CLI tools and file-types for easier parsing in scripts.
CLI tool and python library that converts the output of popular command-line tools, file-types, and common strings to JSON, YAML, or Dictionaries. This allows piping of output to tools like jq and simplifying automation.
=====

== jet

https://github.com/borkdude/jet[`https://github.com/borkdude/jet`]

https://github.com/edn-format/edn[`https://github.com/edn-format/edn`]

https://github.com/cognitect/transit-format[`https://github.com/cognitect/transit-format`]

https://github.com/cognitect/transit-format[`https://github.com/cognitect/transit-format`]

=====
A CLI to transform between JSON, EDN and Transit, powered with a minimal query language.
It runs as a GraalVM binary with fast startup time which makes it suited for shell scripting. It comes with a query language to do intermediate transformation.
=====

== jq

https://github.com/stedolan/jq[`https://github.com/stedolan/jq`]

=====
A lightweight and flexible command-line JSON processor.
The features include:

* jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.
* jq is written in portable C, and it has zero runtime dependencies. You can download a single binary, scp it to a far away machine of the same type, and expect it to work.
* jq can mangle the data format that you have into the one that you want with very little effort, and the program to do so is often shorter and simpler than you'd expect.
=====

// KKKK

== ktap

https://github.com/ktap/ktap[`https://github.com/ktap/ktap`]

=====
A scripting dynamic tracing tool for Linux, it uses a scripting language and lets users trace the Linux kernel dynamically. ktap is designed to give operational insights with interoperability that allows users to tune, troubleshoot and extend the kernel and applications. It's similar to Linux Systemtap and Solaris Dtrace.

ktap has different design principles from Linux mainstream dynamic tracing language in that it's based on bytecode, so it doesn't depend upon GCC, doesn't require compiling kernel module for each script, safe to use in production environment, fulfilling the embedded ecosystem's tracing needs.
=====

// LLLL

== links

http://links.twibright.com/[`http://links.twibright.com/`]

=====
Links is a graphics and text mode web browser, released under GPL. Links is a free software.
The features include:

* Links runs in graphics mode (mouse required) on X Window System (UN*X, Cygwin), SVGAlib, Linux Framebuffer, OS/2 PMShell, AtheOS GUI
* Links runs in text mode (mouse optional) on UN*X console, ssh/telnet virtual terminal, vt100 terminal, xterm, and virtually any other text terminal. Mouse is supported for GPM, xterm, and OS/2. Links supports colors on terminal.
* Easy and quick user control via pull-down menu in both text and graphics mode, in 33 languages.
* HTML 4.0 support (without CSS)
* HTTP 1.1 support
* Tables, frames in both graphics and text mode, builtin image display in graphics mode
* Builtin image display for GIF, JPEG, PNG, XBM, TIFF in graphics mode
* Anti-advertisement animation filter in animated GIFs
* Bookmarks
* Background file downloads
* Automatic reconnection in case of TCP connection breakdown
* Keepalive connections
* Background (asynchronous) DNS lookup
* Possibility to hook up external programs for all MIME types, possibility to choose one of more programs at every opening.
* 48-bit high-quality image gamma correction, resampling and Floyd-Steinberg dithering in all color depths.
* Font resampling (antialiasing) for virtually unlimited pitch range, LCD optimization of fonts and images.
* Builtin fonts in the executable without reliance on any fonts installed in the system 
=====

== lnav

https://github.com/tstack/lnav[`https://github.com/tstack/lnav`]

https://lnav.org/[`https://lnav.org/`]

=====
The Log File Navigator, lnav for short, is an advanced log file viewer for the small-scale. It is a terminal application that can understand your log files and make it easy for you to find problems with little to no setup.
The features include:

* Log messages from different files are collated together into a single view
* Automatic detection of log format
* Automatic decompression of GZip and BZip2 files
* Filter log messages based on regular expressions
* Use SQL to analyze your logs
=====

== ls

https://www.freecodecamp.org/news/the-linux-ls-command-how-to-list-files-in-a-directory-with-options/[`https://www.freecodecamp.org/news/the-linux-ls-command-how-to-list-files-in-a-directory-with-options/`]

*15 Basic `ls` Command Examples* - https://www.tecmint.com/15-basic-ls-command-examples-in-linux/[`https://www.tecmint.com/15-basic-ls-command-examples-in-linux/`]

=====
The ls command is used to list files or directories in Linux and other Unix-based operating systems. 
=====

=== colorls

https://github.com/athityakumar/colorls[`https://github.com/athityakumar/colorls`]

=====
A Ruby script that colorizes the ls output with color and icons.
=====

=== exa

https://github.com/ogham/exa[`https://github.com/ogham/exa`]

https://the.exa.website/[`https://the.exa.website/`]

=====
A modern replacement for the venerable file-listing command-line program ls that ships with Unix and Linux operating systems, giving it more features and better defaults. It uses colours to distinguish file types and metadata. It knows about symlinks, extended attributes, and Git. And it’s small, fast, and just one single binary.  The features include:

* use of colors to list different file types, e.g. images, documents, music, etc.
* displaying files in a grid sized to the terminal window
* displaying files and their metadata i a table
* displaying files and their children in a tree
* git integration
* filtering and sorting of list entries
* displaying icons next to file names
* listing of the extended attributes of files
=====

=== lc

https://github.com/c-blake/lc[`https://github.com/c-blake/lc`]

=====
This program is not and never will be a drop-in replacement for ls at the CLI option compatibility level. ls is a poorly factored mishmash of selection, sorting, and formatting options. With fewer CLI options (but beefier configs) lc is many-fold more flexible. It can create similar output, but my main impetus to write lc was always a better functionality factoring not mere recapitulation.
=====

=== lsd

https://github.com/Peltoche/lsd[`https://github.com/Peltoche/lsd`]

=====
A rewrite of GNU `ls` with added features like colors, icons, tree-view, more formatting options etc.
=====

== lshw

https://github.com/lyonel/lshw[`https://github.com/lyonel/lshw`]

https://ezix.org/project/wiki/HardwareLiSter[`https://ezix.org/project/wiki/HardwareLiSter`]

=====
A small tool to provide detailed information on the hardware configuration of the machine. It can report exact memory configuration, firmware version, mainboard configuration, CPU version and speed, cache configuration, bus speed, etc. on DMI-capable x86 or EFI (IA-64) systems and on some ARM and PowerPC machines (PowerMac G4 is known to work).

Information can be output in plain text, XML or HTML.

It currently supports DMI (x86 and EFI only), OpenFirmware device tree (PowerPC only), PCI/AGP, ISA PnP (x86), CPUID (x86), IDE/ATA/ATAPI, PCMCIA (only tested on x86), USB and SCSI.
=====

== lsof

https://github.com/lsof-org/lsof[`https://github.com/lsof-org/lsof`]

https://en.wikipedia.org/wiki/Lsof[`https://en.wikipedia.org/wiki/Lsof`]

=====
A command-line utilty that is an abbreviation for "list open files".  
It is used in many Unix-like systems to report a list of all open files and the processes that opened them.
An open file may be a regular file, a directory, a NFS file, a block special file, a character special file, a shared library, a regular pipe, a named pipe, a symbolic link, a socket stream, an Internet socket, a UNIX domain socket, and many others.
Almost everything in UNIX is a file, so this command has wide utility.

List all open files:

`lsof`

List all open files for user `moe`:

`lsof -u moe`

List open files for every user except `root`:

`lsof -i -u^root`

List all network connections:

`lsof -i`

List all open files on port 22:

`lsof -i TCP:22`

List all processes opened by PID 25:

`lsof -p 25`

Kill all the processes of a specific user:

`kill -9 `lsof -t -u moe``

List all open files by command/application name:

`lsof -c apache`

List IDs of processes that have opened a particular file:

`lsof -t /usr/lib/systemd/systemd`

List open files in a directory:

`lsof +D /usr/bin`

Find out which program is using a port:

`lsof -i :80`

Find out which program(s) is using a service:

`lsof -i :https`

Find the network connections of a particular user:

`lsof -a -i -u moe`
=====

== Lustre

https://www.nas.nasa.gov/hecc/support/kb/Lustre_Basics_224.html[`https://www.nas.nasa.gov/hecc/support/kb/Lustre_Basics_224.html`]

=====
A Lustre filesystem is a high-performance shared filesystem for Linux clusters that is managed with Lustre software. It is highly scalable and can support many thousands of client nodes, petabytes of storage, and hundreds of gigabytes per second of I/O throughput.
The command line program for Lustra is `lfs`.  Some useful `lfs` commands are:

To display disk usage and limits on a `/somedir/username` directory:

`lfs quota -h -u username /somedir/username`

To also display usage on each OST:

`lfs quota -h -v - u username /somedir/username`

To list space usage for all Lustre filesystems:

`lfs df -h`

or a specific fileystem `/home`:

`lfs df -h /home`

To list all OSTs for a filesystem `/home`:

`lfs osts /home`

To view the striping information for a specific directory or file:

`lfs getstripe [directory name|file name]`
=====

== lvm2

https://sourceware.org/lvm2/[`https://sourceware.org/lvm2/`]

https://en.wikipedia.org/wiki/Logical_Volume_Manager_(Linux)[`https://en.wikipedia.org/wiki/Logical_Volume_Manager_(Linux)`]

https://wiki.gentoo.org/wiki/LVM[`https://wiki.gentoo.org/wiki/LVM`]

https://tldp.org/HOWTO/LVM-HOWTO/[`https://tldp.org/HOWTO/LVM-HOWTO/`]

https://www.redhat.com/sysadmin/lvm-vs-partitioning[`https://www.redhat.com/sysadmin/lvm-vs-partitioning`]

https://www.admin-magazine.com/HPC/Articles/Linux-Writecache[`https://www.admin-magazine.com/HPC/Articles/Linux-Writecache`]

=====
LVM2 refers to the userspace toolset that provide logical volume management facilities on linux.
To use LVM2 you need 3 things: device-mapper in your kernel, the userspace device-mapper support library (libdevmapper) and the userspace LVM2 tools.

The Logical Volume Manager (LVM) is a device mapper framework that provides logical volume management for the Linux kernel.
It is used for:

* Creating single logical volumes of multiple physical volumes or entire hard disks (somewhat similar to RAID 0, but more similar to JBOD), allowing for dynamic volume resizing.
* Managing large hard disk farms by allowing disks to be added and replaced without downtime or service disruption, in combination with hot swapping.
* On small systems (like a desktop), instead of having to estimate at installation time how big a partition might need to be, LVM allows filesystems to be easily resized as needed.
* Performing consistent backups by taking snapshots of the logical volumes.
* Encrypting multiple physical partitions with one password.

LVM can be considered as a thin software layer on top of the hard disks and partitions, which creates an abstraction of continuity and ease-of-use for managing hard drive replacement, repartitioning and backup. 

The lvm2 tools include:

* `fsadm` — utility to resize or check filesystem on a device
* `lvchange` - Change the attributes of logical volume(s)
* `lvconvert` - Change logical volume layout
* `lvcreate` - Create a logical volume
* `lvdisplay` - Display information about a logical volume
* `lvextend` - Add space to a logical volume
* `lvmconf` — LVM configuration modifier
* `lvmconfig` - Display and manipulate configuration information
* `lvmdiskscan` - List devices that may be used as physical volumes
* `lvmdump` — create lvm2 information dumps for diagnostic purposes
* `lvmsadc` — LVM system activity data collector
* `lvmsar` — LVM system activity reporter
* `lvreduce` - Reduce the size of a logical volume
* `lvremove` - Remove logical volume(s) from the system
* `lvrename` - Rename a logical volume
* `lvresize` - Resize a logical volume
* `lvs` - Display information about logical volumes
* `lvscan` - List all logical volumes in all volume groups
* `pvchange` - Change attributes of physical volume(s)
* `pvck` - Check the consistency of physical volume(s)
* `pvcreate` - Initialize physical volume(s) for use by LVM
* `pvdisplay` - Display various attributes of physical volume(s)
* `pvmove` - Move extents from one physical volume to another
* `pvremove` - Remove LVM label(s) from physical volume(s)
* `pvresize` - Resize physical volume(s)
* `pvs` - Display information about physical volumes
* `pvscan` - List all physical volumes
* `vgcfgbackup` - Backup volume group configuration(s)
* `vgcfgrestore` - Restore volume group configuration
* `vgchange` - Change volume group attributes
* `vgck` - Check the consistency of volume group(s)
* `vgconvert` - Change volume group metadata format
* `vgcreate` - Create a volume group
* `vgdisplay` - Display volume group information
* `vgexport` - Unregister volume group(s) from the system
* `vgextend` - Add physical volumes to a volume group
* `vgimport` - Register exported volume group with system
* `vgimportclone` - imports a VG from duplicated PVs, e.g. created by a hardware snapshot of existing PVs
* `vgmerge` - merges two existing VGs
* `vgmknodes` - checks the LVM device nodes in /dev that are needed for active LVs and creates any that are missing and removes unused ones
* `vgreduce` - removes one or more unused PVs from a VG
* `vgremove` - removes one or more VGs, and if LVs exist in the VG, a prompt is used to confirm LV removal 
* `vgrename` - renames a VG
* `vgs` - Display information about VGs
* `vgscan` - Search for all volume groups
* `vgsplit` - Move physical volumes into a new or existing volume group
=====

// MMMM

== m4

*The One True Templating Language* - https://chrisman.github.io/9.html[`https://chrisman.github.io/9.html`]

*Notes on the M4 Macro Language* - https://mbreen.com/m4.html[`https://mbreen.com/m4.html`]

== magic-wormhole

https://github.com/magic-wormhole/magic-wormhole[`https://github.com/magic-wormhole/magic-wormhole`]

=====
Get things from one computer to another, safely.

This package provides a library and a command-line tool named wormhole, which makes it possible to get arbitrary-sized files and directories (or short pieces of text) from one computer to another. The two endpoints are identified by using identical "wormhole codes": in general, the sending machine generates and displays the code, which must then be typed into the receiving machine.

The codes are short and human-pronounceable, using a phonetically-distinct wordlist. The receiving side offers tab-completion on the codewords, so usually only a few characters must be typed. Wormhole codes are single-use and do not need to be memorized.
=====

== metar

https://github.com/flenniken/metar[`https://github.com/flenniken/metar`]

=====
Metar is a library and command line program for reading image metadata.
You can read metadata from JPEG, DNG and TIFF images. Metar understands the standard image metadata formats: XMP, IPTC, Exif, and Tiff tags.
=====

== miller

https://github.com/johnkerl/miller[`https://github.com/johnkerl/miller`]

=====
Miller is like awk, sed, cut, join, and sort for data formats such as CSV, TSV, tabular JSON and positionally-indexed.
With Miller, you get to use named fields without needing to count positional indices, using familiar formats such as CSV, TSV, JSON, and positionally-indexed. Then, on the fly, you can add new fields which are functions of existing fields, drop fields, sort, aggregate statistically, pretty-print, and more.
=====

== moreutils

https://joeyh.name/code/moreutils/[`https://joeyh.name/code/moreutils/`]

https://ostechnix.com/moreutils-collection-useful-unix-utilities/[`https://ostechnix.com/moreutils-collection-useful-unix-utilities/`]

=====
A growing collection of the unix tools that nobody thought to write long ago when unix was young.
It includes:

* chronic: runs a command quietly unless it fails
* combine: combine the lines in two files using boolean operations
* errno: look up errno names and descriptions
* ifdata: get network interface info without parsing ifconfig output
* ifne: run a program if the standard input is not empty
* isutf8: check if a file or standard input is utf-8
* lckdo: execute a program with a lock held
* mispipe: pipe two commands, returning the exit status of the first
* parallel: run multiple jobs at once
* pee: tee standard input to pipes
* sponge: soak up standard input and write to a file
* ts: timestamp standard input
* vidir: edit a directory in your text editor
* vipe: insert a text editor into a pipe
* zrun: automatically uncompress arguments to command
=====

See also xref:_evenmoreutils[evenmoreutils].

== moserial

https://github.com/GNOME/moserial[`https://github.com/GNOME/moserial`]

https://wiki.gnome.org/action/show/Apps/Moserial[`https://wiki.gnome.org/action/show/Apps/Moserial`]

https://www.cyberciti.biz/tips/connect-soekris-single-board-computer-using-minicom.html[`https://www.cyberciti.biz/tips/connect-soekris-single-board-computer-using-minicom.html`]

=====
A GTK-based serial terminal written in Vala.
Moserial is primarily intended for technical users and hardware hackers who need to communicate with embedded systems, test equipment, and serial consoles.
The features include:

* ASCII and HEX views of incoming and outgoing data
* Logging to file of incoming and/or outgoing data
* Support for x, y, and z-modem file send and receive
* Support for profile files, to load/save common configurations
* Easier to use than the alternatives
* Supports i18n
=====

== mpifileutils

https://mpifileutils.readthedocs.io/en/v0.11/[`https://mpifileutils.readthedocs.io/en/v0.11/`]

=====
mpiFileUtils provides both a library called libmfu and a suite of MPI-based tools to manage large datasets, which may vary from large directory trees to large files. High-performance computing users often generate large datasets with parallel applications that run with many processes (millions in some cases). However those users are then stuck with single-process tools like cp and rm to manage their datasets. This suite provides MPI-based tools to handle typical jobs like copy, remove, and compare for such datasets, providing speedups of up to 50x. 

The tools in mpiFileUtils are MPI applications. They must be launched as MPI applications, e.g., within a compute allocation on a cluster using mpirun. The tools do not currently checkpoint, so one must be careful that an invocation of the tool has sufficient time to complete before it is killed.  The tools are:

* `dbcast` - Broadcast a file to compute nodes.
* `dbz2` - Compress a file with bz2.
* `dchmod` - Change owner, group, and permissions on files.
* `dcmp` - Compare files.
* `dcp` - Copy files.
* `ddup` - Find duplicate files.
* `dfind` - Filter files.
* `dreln` - Update symlinks.
* `drm` - Remove files.
* `dstripe` - Restripe files.
* `dsync` - Synchronize files.
* `dtar` - Create and extract tape archive files.
* `dwalk` - List, sort, and profile files.
=====

== mprober

https://lib.rs/crates/mprober[`https://lib.rs/crates/mprober`]

=====
This program aims to collect Linux system information including hostname, kernel version, uptime, RTC time, load average, CPU, memory, network interfaces, block devices and processes. It can be used not only as a normal CLI tool, but also a web application with a front-end webpage and useful HTTP APIs.
=====

== mpv

https://mpv.io/[`https://mpv.io/`]

=====
A command-line that supports a wide variety of media file formats, audio and video codecs, and subtitle types. 
Special input URL types are available to read input from a variety of sources other than disk files. Depending on platform, a variety of different video and audio output methods are supported.
=====

== mtr

https://www.redhat.com/sysadmin/linux-mtr-command[`https://www.redhat.com/sysadmin/linux-mtr-command`]

=====
MTR is a simple, cross-platform command-line network diagnostic tool that combines the functionality of commonly used traceroute and ping programs into a single tool.
=====

== multitail

https://www.tecmint.com/view-multiple-files-in-linux/[`https://www.tecmint.com/view-multiple-files-in-linux/`]

=====
An open source ncurses utility that can be used to display multiple logfiles to standard output in a single window or a single shell that shows last few lines of logfiles in a real-time like tail command which split console into more subwindows (much like screen command). It also supports color highlighting, filtering, adding and deleting windows and much more.
=====

== musikcube

https://musikcube.com/[`https://musikcube.com/`]

https://github.com/clangen/musikcube[`https://github.com/clangen/musikcube`]

=====
musikcube is a fully functional terminal-based music player, library, and streaming audio server that runs natively on Windows, macOS, and Linux. it also runs well on a Raspberry Pi with a custom DAC (e.g. IQaudIO DAC+, HiFiBerry DAC+ and others), and can output 24bit/192k audio comfortably.

musikdroid is a native Android app that connects to musikcube servers. it can be used as a streaming audio client and/or a remote control for your computer or home stereo.

musikcore is a cross-platform c++ library that drives things. it can be used by developers as a backend for creating or prototyping apps that play music. out of the box it provides file scanning, tag indexing, gapless and crossfading playback, play queue management, playlist crud, an extensible plugin architecture, and support for libraries containing 250,000+ audio tracks.
=====

== mutil

https://github.com/pkolano/mutil[`https://github.com/pkolano/mutil`]

=====
Mutil provides `mcp` and `msum`, which are drop-in replacements for cp and md5sum that utilize multiple types of parallelism to achieve maximum copy and checksum performance on clustered file systems. Multi-threading is used to ensure that nodes are kept as busy as possible. Read/write parallelism allows individual operations of a single copy to be overlapped using asynchronous I/O. Multi-node cooperation allows different nodes to take part in the same copy/checksum. Split file processing allows multiple threads to operate concurrently on the same file. Finally, hash trees allow inherently serial checksums to be performed in parallel.
=====

// NNNN

== nb

https://github.com/xwmx/nb[`https://github.com/xwmx/nb`]

=====
A command line and local web note‑taking, bookmarking, archiving, and knowledge base application with:

* plain text data storage,
* encryption,
* filtering, pinning, #tagging, and search,
* Git-backed versioning and syncing,
* Pandoc-backed conversion,
* wiki-style linking,
* terminal and GUI web browsing and editing,
* global and local notebooks,
* organization with folders,
* customizable color themes,
* extensibility through plugins

nb creates notes in text-based formats like Markdown, Org, and LaTeX, can work with files in any format, can import and export notes to many document formats, and can create private, password-protected encrypted notes and bookmarks. With nb, you can write notes using Vim, Emacs, VS Code, Sublime Text, and any other text editor you like, as well as terminal and GUI web browsers.
=====

== ncat

https://nmap.org/ncat/[`https://nmap.org/ncat/`]

=====
Ncat is a feature-packed networking utility which reads and writes data across networks from the command line. Ncat was written for the Nmap Project as a much-improved reimplementation of the venerable Netcat. It uses both TCP and UDP for communication and is designed to be a reliable back-end tool to instantly provide network connectivity to other applications and users. Ncat will not only work with IPv4 and IPv6 but provides the user with a virtually limitless number of potential uses.

Among Ncat’s vast number of features there is the ability to chain Ncats together, redirect both TCP and UDP ports to other sites, SSL support, and proxy connections via SOCKS4 or HTTP (CONNECT method) proxies (with optional proxy authentication as well). Some general principles apply to most applications and thus give you the capability of instantly adding networking support to software that would normally never support it.
=====

== ncurses

https://invisible-island.net/ncurses/ncurses.html[`https://invisible-island.net/ncurses/ncurses.html`]

https://en.wikipedia.org/wiki/Ncurses[`https://en.wikipedia.org/wiki/Ncurses`]

*NCURSES Programming HOWTO* - https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/[`https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/`]

*Getting started with ncurses* - https://www.linuxjournal.com/content/getting-started-ncurses[`https://www.linuxjournal.com/content/getting-started-ncurses`]

*Programmer's Guide to NCurses* - https://books.google.com/books/about/Programmer_s_Guide_to_NCurses.html[`https://books.google.com/books/about/Programmer_s_Guide_to_NCurses.html`]

*Guide to NCurses Programming* - https://books.google.com/books?id=up7UswEACAAJ[`https://books.google.com/books?id=up7UswEACAAJ`]

=====
A programming library providing an application programming interface (API) that allows the programmer to write text-based user interfaces in a terminal-independent manner. It is a toolkit for developing "GUI-like" application software that runs under a terminal emulator. It also optimizes screen changes, in order to reduce the latency experienced when using remote shells. 

The distribution includes the library and support utilities, including

* `captoinfo`, a termcap conversion tool
* `clear`, utility for clearing the screen
* `infocmp`, the terminfo decompiler
* `tabs`, set tabs on a terminal
* `tic`, the terminfo compiler
* `toe`, list (table of) terminfo entries
* `tput`, utility for retrieving terminal capabilities in shell scripts
* `tset`, to initialize the terminal
=====


=== dialog

https://invisible-island.net/dialog/dialog.html[`https://invisible-island.net/dialog/dialog.html`]

https://en.wikipedia.org/wiki/Dialog_(software)[`https://en.wikipedia.org/wiki/Dialog_(software)`]

https://www.linuxjournal.com/article/2807[`https://www.linuxjournal.com/article/2807````]

=====
Dialog is an application used in shell scripts which displays text user interface widgets. It uses the curses or ncurses library. The latter provides users with the ability to use a mouse, e.g., in an xterm.
=====

== neofetch

https://github.com/dylanaraps/neofetch[`https://github.com/dylanaraps/neofetch`]

=====
Neofetch is a command-line system information tool written in bash 3.2+. Neofetch displays information about your operating system, software and hardware in an aesthetic and visually pleasing way.

The overall purpose of Neofetch is to be used in screen-shots of your system. Neofetch shows the information other people want to see. There are other tools available for proper system statistic/diagnostics.
=====

== netcat

https://blog.ikuamike.io/posts/2021/netcat/[`https://blog.ikuamike.io/posts/2021/netcat/`]

== netpbm

http://netpbm.sourceforge.net/[`http://netpbm.sourceforge.net/`]

http://netpbm.sourceforge.net/doc/[`http://netpbm.sourceforge.net/doc/`]

=====
A toolkit for manipulation of graphic images, including conversion of images between a variety of different formats. There are over 300 separate tools in the package including converters for about 100 graphics formats. Examples of the sort of image manipulation we're talking about are: Shrinking an image by 10%; Cutting the top half off of an image; Making a mirror image; Creating a sequence of images that fade from one image to another. 
The goal of Netpbm is to be a single source for all the primitive graphics utilities, especially converters, one might need.
=====

== netsniff

http://netsniff-ng.org/[`http://netsniff-ng.org/`]

https://github.com/netsniff-ng/netsniff-ng[`https://github.com/netsniff-ng/netsniff-ng`]

=====
A free Linux networking toolkit, a Swiss army knife for your daily Linux network plumbing if you will.

Its gain of performance is reached by zero-copy mechanisms, so that on packet reception and transmission the kernel does not need to copy packets from kernel space to user space and vice versa.
Our toolkit can be used for network development and analysis, debugging, auditing or network reconnaissance.
The netsniff-ng toolkit consists of the following utilities:

* netsniff-ng, a fast zero-copy analyzer, pcap capturing and replaying tool
* trafgen, a multithreaded low-level zero-copy network packet generator
* mausezahn, high-level packet generator for HW/SW appliances with Cisco-CLI*
* bpfc, a Berkeley Packet Filter compiler, Linux BPF JIT disassembler
* ifpps, a top-like kernel networking statistics tool
* flowtop, a top-like netfilter connection tracking tool
* curvetun, a lightweight curve25519-based IP tunnel
* astraceroute, an autonomous system (AS) trace route utility
=====

== ngrep

https://github.com/jpr5/ngrep/[`https://github.com/jpr5/ngrep/`]

=====
Like GNU grep applied to the network layer. It's a PCAP-based tool that allows you to specify an extended regular or hexadecimal expression to match against data payloads of packets. It understands many kinds of protocols, including IPv4/6, TCP, UDP, ICMPv4/6, IGMP and Raw, across a wide variety of interface types, and understands BPF filter logic in the same fashion as more common packet sniffing tools, such as tcpdump and snoop.
=====

== nncp

https://bellard.org/nncp/[`https://bellard.org/nncp/`]

=====
NNCP is an experiment to build a practical lossless data compressor with neural networks.
The current release of NNCP is implemented in C and uses LibNC to get better performance than PyTorch.
=====

== nnn

https://github.com/jarun/nnn[`https://github.com/jarun/nnn`]

=====
A full-featured terminal file manager. It's tiny and nearly 0-config with an incredible speed.
It is designed to be unobtrusive with smart workflows to match the trains of thought.
nnn can analyze disk usage, batch rename, launch apps and pick files. The plugin repository has tons of plugins to extend the capabilities further e.g. preview, (un)mount disks, find & list, file/dir diff, upload files.
=====

== NSS

https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS[`https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS`]

https://wiki.mozilla.org/NSS[`https://wiki.mozilla.org/NSS`]

=====
There are 72 command-line utilities in version 3.51 of NSS.
=====

-----
ddbuiltin
atob
baddbdir
bltest
btoa
certdb_gtest
certhigh_gtest
certutil
chktest
cmsutil
conflict
crlutil
crmftest
cryptohi_gtest
dbtest
derdump
der_gtest
dertimetest
digest
ecperf
encodeinttest
fbectest
fipstest
httpserv
listsuites
lowhashtest
makepqg
mangle
modutil
multinit
nonspr10
nss_bogo_shim
nss-config
nss-policy-check
ocspclnt
ocspresp
oidcalc
p7content
p7env
p7sign
p7verify
pk11ectest
pk11gcmtest
pk11_gtest
pk11importtest
pk11mode
pk12util
pk1sign
pkix-errcodes
pp
pwdecrypt
remtest
rsaperf
rsapoptst
sdrtest
secmodtest
selfserv
shlibsign
signtool
signver
smime_gtest
softoken_gtest
ssl_gtest
ssltap
strsclnt
symkeyutil
sysinit_gtest
tstclnt
util_gtest
vfychain
vfyserv
-----

// OOOO

== octave

https://www.gnu.org/software/octave/index[`https://www.gnu.org/software/octave/index`]

https://en.wikipedia.org/wiki/GNU_Octave[`https://en.wikipedia.org/wiki/GNU_Octave`]

https://www.systutorials.com/docs/linux/man/1-octave-cli/[`https://www.systutorials.com/docs/linux/man/1-octave-cli/`]

https://www.admin-magazine.com/HPC/Articles/Preload-Trick[`https://www.admin-magazine.com/HPC/Articles/Preload-Trick`]

https://stackoverflow.com/questions/132092/what-is-your-favourite-matlab-octave-programming-trick[`https://stackoverflow.com/questions/132092/what-is-your-favourite-matlab-octave-programming-trick`]

=====
GNU Octave is software featuring a high-level programming language, primarily intended for numerical computations. Octave helps in solving linear and nonlinear problems numerically, and for performing other numerical experiments using a language that is mostly compatible with MATLAB. It may also be used as a batch-oriented language. 
=====

== orgalorg

https://github.com/reconquest/orgalorg[`https://github.com/reconquest/orgalorg`]

=====
A utility for running commands and uploading files in parallel on many host via SSH.
The features include:

* Zero-configuration. No config files. Everything is done via command line flags.
* Running SSH commands or shell scripts on any number of hosts in parallel. All output from nodes will be returned back, keeping stdout and stderr streams mapping of original commands.
* Synchronizing files and directories across cluster with prior global cluster locking. After synchronization is done, arbitrary command can be evaluated.
* Synchronizing files and directories with subsequent run of complex multi-step scenario with steps synchronization across cluster.
* User-friendly progress indication.
* Both strict or loose modes of failover to be sure that everything will either fail on any error or try to complete, no matter of what.
* Interactive password authentication as well as SSH public key authentication.
* Ability to run commands through sudo.
* Grouped mode of output, so stdout and stderr from nodes will be grouped by node name. Alternatively, output can be returned as soon as node returns something.
=====

// PPPP

== packARC

https://github.com/packjpg/packARC[`https://github.com/packjpg/packARC`]

=====
packARC is an archiver program specially designed for lossless further 
compression of media files in the JPEG, MP3, BMP and PNM formats. It 
contains all of my latest developments, the packJPG, packMP3, packPNM 
and packARI algorithms with an easy to use command line interface. 
Typical further compression for JPEG is ~20%, for MP3 it is ~16% and for 
PNM, BMP and other file types it is highly dependent on the contents of 
the file. 

packARC creates .pja archives, which may contain several files of 
arbitrary file type. In general packARC is not as efficient as ZIP, RAR, 
or 7z when compressing generic files, but it performs very good for JPG, 
MP3, BMP and PNM-files. 

Besides the archiver program, packARC, this package also contains the 
source code for packJPG, packMP3, packPNM, and packARI. packJPG, 
packMP3, packPNM and packARI do not create archives, but compress JPG, 
MP3, PNM or, in the case of packARI, generic files on a file by file 
basis. 
=====

== pandashells

https://github.com/robdmc/pandashells[`https://github.com/robdmc/pandashells`]

=====
Pandashells is an attempt to marry the expressive, concise workflow of the shell pipeline with the statistical and visualization tools of the python data-stack.  It is a set of command-line tools for working with tabular data that
enables you to easily read/write data in CSV, or space delimited formats,
quickly aggregate, join, and summarize tabular data, compute descriptive statistics,
perform spectral decomposition and linear regression,
create data visualizations that can be saved to images or rendered interactively using either a native backend or html,
and easily integrate with unix tools like curl, awk, grep, sed, etc.
=====

== pandoc

https://pandoc.org/[`https://pandoc.org/`]

=====
A Haskell library for converting from one markup format to another, and a command-line tool that uses this library.
Pandoc can also produce PDF output via LaTeX, Groff ms, or HTML.
Pandoc’s enhanced version of Markdown includes syntax for tables, definition lists, metadata blocks, footnotes, citations, math, and much more.

Pandoc has a modular design: it consists of a set of readers, which parse text in a given format and produce a native representation of the document (an abstract syntax tree or AST), and a set of writers, which convert this native representation into a target format. Thus, adding an input or output format requires only adding a reader or writer.
Because pandoc’s intermediate representation of a document is less expressive than many of the formats it converts between, one should not expect perfect conversions between every format and every other. Pandoc attempts to preserve the structural elements of a document, but not formatting details such as margin size. 
=====

=== PanDiff

https://github.com/davidar/pandiff[`https://github.com/davidar/pandiff`]

=====
Prose diffs for any document format supported by Pandoc.
=====

== papis

https://github.com/papis/papis[`https://github.com/papis/papis`]

=====
Papis is a powerful and highly extensible command-line based document and bibliography manager.
The features include:

* Synchronizing of documents: put your documents in some folder and synchronize it using the tools you love: git, dropbox, rsync, OwnCloud, Google Drive ... whatever.
* Share libraries with colleagues without forcing them to open an account, nowhere, never.
* Download directly paper information from DOI number via Crossref.
* (optional) scihub support, use the example papis script examples/scripts/papis-scihub to download papers from scihub and add them to your library with all the relevant information, in a matter of seconds, also you can check the documentation here.
* Import from Zotero and other managers using papis-zotero.
* Create custom scripts to help you achieve great tasks easily (doc).
* Export documents into many formats (bibtex, yaml, ...)
=====

== parallel

https://www.gnu.org/software/parallel/[`https://www.gnu.org/software/parallel/`]

=====
GNU parallel is a shell tool for executing jobs in parallel using one or more computers. A job can be a single command or a small script that has to be run for each of the lines in the input. The typical input is a list of files, a list of hosts, a list of users, a list of URLs, or a list of tables. A job can also be a command that reads from a pipe. GNU parallel can then split the input and pipe it into commands in parallel. 

If you use xargs and tee today you will find GNU parallel very easy to use as GNU parallel is written to have the same options as xargs. If you write loops in shell, you will find GNU parallel may be able to replace most of the loops and make them run faster by running several jobs in parallel. 
=====

=== paexec

https://github.com/cheusov/paexec[`https://github.com/cheusov/paexec`]

=====
Small program that processes a list of tasks in parallel
on different CPUs, computers in a network or whatever.
=====


== pastel

https://github.com/sharkdp/pastel[`https://github.com/sharkdp/pastel`]

=====
A command-line tool to generate, analyze, convert and manipulate colors. It supports many different color formats and color spaces like RGB (sRGB), HSL, CIELAB, CIELCh as well as ANSI 8-bit and 24-bit representations.
=====

== perf

https://perf.wiki.kernel.org/index.php/Main_Page[`https://perf.wiki.kernel.org/index.php/Main_Page`]

https://en.wikipedia.org/wiki/Perf_(Linux)[`https://en.wikipedia.org/wiki/Perf_(Linux)`]

https://www.brendangregg.com/perf.html[`https://www.brendangregg.com/perf.html`]

=====
A performance analyzing tool in Linux, available from Linux kernel version 2.6.31 in 2009. 
A userspace controlling utility, named perf, is accessed from the command line and provides 
a number of subcommands; it is capable of statistical profiling of the entire 
system (both kernel and userland code). 

The userspace `perf` command presents a simple to use interface with commands like:

* `perf stat`: obtain event counts
* `perf record`: record events for later reporting
* `perf report`: break down events by process, function, etc.
* `perf annotate`: annotate assembly or source code with event counts
* `perf top`: see live event count
* `perf bench`: run different kernel microbenchmarks 
=====

== perl

https://www.slideshare.net/davorg/lpw-begin[`https://www.slideshare.net/davorg/lpw-begin`]

http://perl-tutorial.org/[`http://perl-tutorial.org/`]

=== cpanminus

https://metacpan.org/pod/App::cpanminus[`https://metacpan.org/pod/App::cpanminus`]

=====
A alternative tool to get, unpack, build and install modules from CPAN.
=====

=== perlbrew

https://perlbrew.pl/[`https://perlbrew.pl/`]

=====
An admin-free perl installation management tool.
It is a tool to manage multiple perl installations in your $HOME directory (or wherever you specify). They are completely isolated perl universes, and has no relationship with system perl. 
=====

== pgcli

https://github.com/dbcli/pgcli[`https://github.com/dbcli/pgcli`]

=====
A CLI postgres client that does auto-completion and syntax highlighting.
=====

== Phoronix Test Suite

https://www.phoronix-test-suite.com/[`https://www.phoronix-test-suite.com/`]

https://github.com/phoronix-test-suite/phoronix-test-suite/[`https://github.com/phoronix-test-suite/phoronix-test-suite/`]

https://ostechnix.com/phoronix-test-suite-open-source-testing-benchmarking-tool/[`https://ostechnix.com/phoronix-test-suite-open-source-testing-benchmarking-tool/`]

=====
The Phoronix Test Suite is the most comprehensive testing and benchmarking platform available for Linux, Solaris, macOS, Windows, and BSD operating systems. The Phoronix Test Suite allows for carrying out tests in a fully automated manner from test installation to execution and reporting. All tests are meant to be easily reproducible, easy-to-use, and support fully automated execution. The Phoronix Test Suite is open-source under the GNU GPLv3 license and is developed by Phoronix Media in cooperation with partners.

The Phoronix Test Suite itself is an open-source framework for conducting automated tests along with reporting of test results, detection of installed system software/hardware, and other features. Modules for the Phoronix Test Suite also allow for integration with git-bisect and other revision control systems for per-commit regression testing, system sensor monitoring, and other extras.

This framework is designed to be an extensible architecture so that new test profiles and suites can be easily added to represent performance benchmarks, unit tests, and other quantitative and qualitative (e.g. image quality comparison) measurements. Available through OpenBenchmarking.org, a collaborative storage platform developed in conjunction with the Phoronix Test Suite, are more than 200 individual test profiles and more than 60 test suites available by default from the Phoronix Test Suite. Independent users are also able to upload their test results, profiles, and suites to OpenBenchmarking.org. A test profile is a single test that can be executed by the Phoronix Test Suite -- with a series of options possible within every test -- and a test suite is a seamless collection of test profiles and/or additional test suites. A test profile consists of a set of Bash/shell scripts and XML files while a test suite is a single XML file.
=====

== pigz

https://github.com/madler/pigz[`https://github.com/madler/pigz`]

=====
pigz, which stands for Parallel Implementation of GZip, is a fully functional
replacement for gzip that exploits multiple processors and multiple cores to
the hilt when compressing data.
=====

== piknik

https://github.com/jedisct1/piknik[`https://github.com/jedisct1/piknik`]

=====
Copy/paste anything over the network.
Ever needed a copy/paste clipboard that works over the network?
Piknik seamlessly and securely transfers URLs, code snippets, documents, virtually anything between arbitrary hosts.
No SSH needed, and hosts can sit behind NAT gateways, on different networks.
=====

== ping

=== pingtop

https://github.com/laixintao/pingtop[`https://github.com/laixintao/pingtop`]

=====
Ping multiple servers and show the result in a top like terminal UI.
=====

== pipx

https://pypa.github.io/pipx/[`https://pypa.github.io/pipx/`]

=====
A tool to help you install and run end-user applications written in Python. It's roughly similar to macOS's brew, JavaScript's npx, and Linux's apt.

It's closely related to pip. In fact, it uses pip, but is focused on installing and managing Python packages that can be run from the command line directly as applications.

While pip is a general-purpose package installer for both libraries and apps with no environment isolation, pipx is made specifically for application installation, as it adds isolation yet still makes the apps available in your shell: pipx creates an isolated environment for each application and its associated packages.
=====

== Plan 9 from User Space

https://9fans.github.io/plan9port/[`https://9fans.github.io/plan9port/`]

https://en.wikipedia.org/wiki/Plan_9_from_User_Space[`https://en.wikipedia.org/wiki/Plan_9_from_User_Space`]

https://github.com/9fans/plan9port[`https://github.com/9fans/plan9port`]

=====
Plan 9 from User Space (also plan9port or p9p) is a port of many Plan 9 from Bell Labs libraries and applications to Unix-like operating systems. Currently it has been tested on a variety of operating systems including: Linux, macOS, FreeBSD, NetBSD, OpenBSD, Solaris and SunOS. The project's name is a reference to the 1950s Ed Wood film Plan 9 from Outer Space.

A number of key applications have been ported, as have programs used by the system itself, along with the requisite libraries from Plan 9. All of these have been made to work on top of a Unix-like environment instead of their native Plan 9. Some of the most significant ported components are:

* `rc` – The Plan 9 shell.
* `sam` – A text editor.
* `acme` – A combination text editor and graphical shell especially useful to programmers.
* `mk` – A tool for building software, analogous to the traditional Unix make utility.
* `plumber` – An interprocess messaging facility.
* `Venti` – A network storage system that permanently stores data blocks.
=====

== playerctl

https://github.com/altdesktop/playerctl[`https://github.com/altdesktop/playerctl`]

=====
A command-line utility and library for controlling media players that implement the MPRIS D-Bus Interface Specification. Playerctl makes it easy to bind player actions, such as play and pause, to media keys. You can also get metadata about the playing track such as the artist and title for integration into statusline generators or other command-line tools.
Playerctl works with vlc, mpv, RhythmBox, web browsers, cmus, mpd, spotify and others.
=====

== podman

https://podman.io/[`https://podman.io/`]

=====
Podman is a daemonless, open source, Linux native tool designed to make it easy to find, run, build, share and deploy applications using Open Containers Initiative (OCI) Containers and Container Images. Podman provides a command line interface (CLI) familiar to anyone who has used the Docker Container Engine. Most users can simply alias Docker to Podman (alias docker=podman) without any problems.

Containers under the control of Podman can either be run by root or by a non-privileged user. Podman manages the entire container ecosystem which includes pods, containers, container images, and container volumes using the libpod library. Podman specializes in all of the commands and functions that help you to maintain and modify OCI container images, such as pulling and tagging. It allows you to create, run, and maintain those containers and container images in a production environment.

Find a container image:

-----
podman search busybox
INDEX       NAME                       DESCRIPTION     STARS   OFFICIAL   AUTOMATED
docker.io   docker.io/library/busybox  Busybox base image.
-----

Run a container image:

-----
podman run -it docker.io/library/busybox
-----

Attach to a running container using the container's name, the latest container, or the ID.

-----
podman attach [busybox|--latest|1234]
-----
=====

== poppler-utils

https://poppler.freedesktop.org/[`https://poppler.freedesktop.org/`]

https://en.wikipedia.org/wiki/Poppler_(software)[`https://en.wikipedia.org/wiki/Poppler_(software)`]

=====
A collection of tools built on Poppler's library API, to manage PDF and extract contents:

* pdfdetach – extract embedded documents from a PDF
* pdffonts – lists the fonts used in a PDF
* pdfimages – extract all embedded images at native resolution from a PDF
* pdfinfo – list all information of a PDF
* pdfseparate – extract single pages from a PDF
* pdftocairo – convert single pages from a PDF to vector or bitmap formats using cairo
* pdftohtml – convert PDF to HTML format retaining formatting
* pdftoppm – convert a PDF page to a bitmap
* pdftops – convert PDF to printable PS format
* pdftotext – extract all text from PDF
* pdfunite – merges several PDF
=====

== procs

https://github.com/dalance/procs[`https://github.com/dalance/procs`]

=====
A replacement for ps written in Rust.
The features are:

* Output by the colored and human-readable format
* Automatic theme detection based on terminal background
* Keyword search over multi-column
* Some additional information which are not supported by ps
** TCP/UDP port
** Read/Write throughput
** Docker container name
** More memory information
* Pager support
* Watch mode like top
* Tree view
=====

== ptyget

https://jdebp.uk/Softwares/djbwares/bernstein-ptyget.html[`https://jdebp.uk/Softwares/djbwares/bernstein-ptyget.html`]

=====
The ptyget package is a toolset for running programs in various ways under pseudo-terminals, making programs exhibit their "interactive mode" behaviours in circumstances where they would normally operate in non-interactive mode. 

It comprises several minor tools (`background`, the obsolete `ttydetach`, `exclon`, `excloff`, and some internal utilities) and three major ones:

* `ptybandage` - It takes a command to run (which has to be a proper external command, of course) and runs it in such a way that it thinks that its standard input, output, and error are attached to a terminal, connecting those through to `ptybandage`'s original standard input and output.  It deals with the nuances of running under job control shells, ensuring that a terminal STOP character not only stops ptybandage but also stops the program running attached to the inner terminal. 

* `ptyrun` -  Its primary use case is remote execution environments that have not themselves set up terminals, running programs that don't operate as desired when there's no terminal.
It doesn't expect to be running under a job control shell, and if the command being run receives a stop signal it is simply restarted. 

* `nobuf` - Its primary use case is making programs that use the C library's "streams" operate those streams in line buffered mode, the default for the standard input and output streams being block buffered mode if they are not directed to a terminal. Block buffered mode is not useful for (say) a program that generates output progressively, line by line, where one wants to watch that output happen by monitoring additions to the file it is directed to. 
=====

== pure bash bible

https://github.com/dylanaraps/pure-bash-bible[`https://github.com/dylanaraps/pure-bash-bible`]

=====
A collection of pure bash alternatives to external processes.
The goal of this book is to document commonly-known and lesser-known methods of doing various tasks using only built-in bash features. Using the snippets from this bible can help remove unneeded dependencies from scripts and in most cases make them faster.
=====

== pv

http://www.ivarch.com/programs/pv.shtml[`http://www.ivarch.com/programs/pv.shtml`]

https://catonmat.net/unix-utilities-pipe-viewer[`https://catonmat.net/unix-utilities-pipe-viewer`]

=====
A terminal-based tool for monitoring the progress of data through a pipeline. It can be inserted into any normal pipeline between two processes to give a visual indication of how quickly data is passing through, how long it has taken, how near to completion it is, and an estimate of how long it will be until completion. 
=====

== pwncat

https://github.com/cytopia/pwncat[`https://github.com/cytopia/pwncat`]

=====
A fully compatible netcat fork written in Python with many more aggressive network features on top.

It comes with a Python Scripting Engine (PSE) that allows you to manipulate incoming and outgoing traffic to your needs. This can reach from wrapping current TCP/UDP traffic into higher protocols such as HTTP, FTP, Telnet, etc or even go to encrypting and decrypting your traffic.

Besides regular netcat features like full IPv4, IPv6 and UDP/TCP, IP ToS, port scanning, server/client, bind- and reverse shells, it also comes with pivoting features, ssh-less local and remote port-forwarding, port-hopping, target self-injection and many more.
=====

== py-spy

https://github.com/benfred/py-spy[`https://github.com/benfred/py-spy`]

=====
py-spy is a sampling profiler for Python programs. It lets you visualize what your Python program is spending time on without restarting the program or modifying the code in any way. py-spy is extremely low overhead: it is written in Rust for speed and doesn't run in the same process as the profiled Python program. This means py-spy is safe to use against production Python code.
=====

// QQQQ

== qodem

http://qodem.sourceforge.net/[`http://qodem.sourceforge.net/`]

https://github.com/klamonte/qodem[`https://github.com/klamonte/qodem`]

=====
Qodem is a public domain re-implementation of the DOS-era Qmodem serial communications package, updated for modern systems. Qodem goes beyond similar DOS-era emulators in many ways:

* In addition to serial/modem connections, Qodem can also connect to remote systems over telnet, rlogin, ssh, raw sockets, or through an arbitrary command line.
* Qodem is curses-based, and as such can be run in command-line environments such as the raw Linux console, through an ssh session, or inside a graphical X11-based terminal emulator. Qodem can even be run inside itself.
* Qodem understands its supported emulations much better than many other programs. It has a "vttest score" of 104; under a true xterm it even displays double-width/double-height characters correctly. It can play ANSI Music, supports ANSI fallback for Avatar, translates both PC VGA and DEC multinational characters to Unicode, and can handle the UTF-8 flavors of Linux and xterm emulations.

Qodem is designed for:

* Console users who want a more capable terminal without having to resort to an X-based emulator. Qodem provides a much longer scrollback, screen dump, capture, keyboard macros, very good VT100 emulation, and many more functions.
* Windows and X11 desktop users who want a full-featured terminal with a keyboard-driven interface. The X11 and Windows versions of Qodem combine the typical conveniences of modern terminals including scrollback, select-and-paste, Unicode support, and a resizable window, with more rare BBS-era features like Zmodem, Kermit, and keyboard macros.
* System administrators who need to manage a number of machines. Qodem can keep track of those machines in its phone book, including usernames and passwords, and it can be used to transfer files across a connection that spans multiple firewalls using Zmodem or Kermit.
=====

// RRRR

== rclone

https://github.com/rclone/rclone[`https://github.com/rclone/rclone`]

=====
Rclone ("rsync for cloud storage") is a command line program to sync files and directories to and from different cloud storage providers.
=====

== recode

https://github.com/rrthomas/recode[`https://github.com/rrthomas/recode`]

=====
The Recode library converts files between character sets and usages. It recognises or produces over 200 different character sets (or about 300 if combined with an iconv library) and transliterates files between almost any pair. When exact transliteration are not possible, it gets rid of offending characters or falls back on approximations. The recode program is a handy front-end to the library.
=====

== renameuntils

https://www.nongnu.org/renameutils/[`https://www.nongnu.org/renameutils/`]

https://ostechnix.com/how-to-rename-multiple-files-at-once-in-linux/[`https://ostechnix.com/how-to-rename-multiple-files-at-once-in-linux/`]

=====
The file renaming utilities (renameutils for short) are a set of programs designed to make renaming of files faster and less cumbersome.
The file renaming utilities consists of five programs - qmv, qcp, imv, icp and deurlname.
=====

== RHash

https://github.com/rhash/RHash[`https://github.com/rhash/RHash`]

=====
RHash (Recursive Hasher) is a console utility for calculation and verification of magnet links and various message digests, including CRC32, CRC32C, MD4, MD5, SHA1, SHA256, SHA512, SHA3, AICH, ED2K, DC++ TTH, BitTorrent BTIH, Tiger, GOST R 34.11-94, GOST R 34.11-2012, RIPEMD-160, HAS-160, EDON-R, and Whirlpool.

Message digests are used to ensure and verify integrity of large volumes of data for a long-term storing or transferring.
=====

== rlwrap

https://github.com/hanslub42/rlwrap[`https://github.com/hanslub42/rlwrap`]

=====
A  'readline wrapper', a small utility that uses the GNU Readline library to allow the editing of keyboard input for any command.
You should consider using rlwrap especially when you need user-defined completion (by way of completion word lists) and persistent history, or if you want to program 'special effects' using the filter mechanism.

As it is often used with older or even obsolete software, rlwrap strives to compile and run on a fairly wide range of not necessarily recent Unix-like systems (FreeBSD, OSX, HP-UX, AIX, Solaris, QNX, cygwin, linux and probably quite a few more).
=====

== rnm

https://github.com/neurobin/rnm[`https://github.com/neurobin/rnm`]

=====
Renames files/directories in bulk. Naming scheme (*Name String*) can be applied or regex replace can be performed to modify file names on the fly. It uses PCRE2 (revised version of PCRE) regex to provide search (and replace) functionality.

It provides versatile options to modify names, delete/replace part of it, indexing, case conversion, insert text, insert various file information like modification time, access time, permission etc.., insert parent directory names, working directory name etc.. and many more.
=====

== rpm

https://rpm.org/[`https://rpm.org/`]

=====
The RPM Package Manager (RPM) is a powerful package management system capable of

* building computer software from source into easily distributable packages
* installing, updating and uninstalling packaged software
* querying detailed information about the packaged software, whether installed or not
* verifying integrity of packaged software and resulting software installation

List the files in an installed package:

`rpm -ql package-name`

List the files in an RPM package:

`rpm -qlp package.rpm`

Extract files from an RPM:

`rpm2cpio ./package.rpm | cpio -idmv`
=====

== rufus

https://github.com/pbatard/rufus[`https://github.com/pbatard/rufus`]

=====
A utility that helps format and create bootable USB flash drives.
The features include:

* Format USB, flash card and virtual drives to FAT/FAT32/NTFS/UDF/exFAT/ReFS/ext2/ext3
* Create DOS bootable USB drives, using FreeDOS or MS-DOS (Windows 8.1 or earlier)
* Create BIOS or UEFI bootable drives, including UEFI bootable NTFS
* Create bootable drives from bootable ISOs (Windows, Linux, etc.)
* Create bootable drives from bootable disk images, including compressed ones
* Create Windows To Go drives
* Create persistent Linux partitions
* Download official Microsoft Windows 8 or Windows 10 retail ISOs
* Compute MD5, SHA-1 and SHA-256 checksums of the selected image
* Twice as fast as Microsoft's USB/DVD tool or UNetbootin, on ISO → USB creation (1)
* Perform bad blocks checks, including detection of "fake" flash drives
=====

// SSSS

== s

https://github.com/zquestz/s[`https://github.com/zquestz/s`]

=====
Web search from the terminal.
=====

== safecopy

http://safecopy.sourceforge.net/[`http://safecopy.sourceforge.net/`]

=====
A data recovery tool which tries to extract as much data as possible from a problematic (i.e. damaged sectors) source - like floppy drives, hard disk partitions, CDs, tape devices, ..., where other tools like dd would fail due to I/O errors.
Safecopy includes a low level IO layer to read CDROM disks in raw mode, and issue device resets and other helpful low level operations on a number of other device classes.
=====

== sane

http://www.sane-project.org/intro.html[`http://www.sane-project.org/intro.html`]

https://www.makeuseof.com/how-to-scan-documents-in-linux-with-sanes-most-useful-commands/[`https://www.makeuseof.com/how-to-scan-documents-in-linux-with-sanes-most-useful-commands/`]

=====
SANE stands for "Scanner Access Now Easy" and is an application programming interface (API) that provides standardized access to any raster image scanner hardware (flatbed scanner, hand-held scanner, video- and still-cameras, frame-grabbers, etc.). 
=====

== savors

https://github.com/pkolano/savors[`https://github.com/pkolano/savors`]

=====
Savors is a framework for Synchronization And Visualization Of aRbitrary Streams. The goal of Savors is to supercharge the command-line tools already used by administrators with powerful visualizations that help them understand the output much more rapidly and with far greater scalability across systems. Savors not only supports the output of existing commands, but does so in a manner consistent with those commands by combining the line-editing capabilities of vi, the rapid window manipulation of GNU screen, the power and compactness of perl expressions, and the elegance of Unix pipelines. Savors was designed to support "impromptu visualization", where the user can simply feed in the commands they were already using to create alternate views with optional on-the-fly aggregation of information across many systems. In this way, visualization becomes part of the administrator's standard repertoire of monitoring and analysis techniques with no need for a priori aggregation of data at a centralized resource or conversion of the data into a predefined format.

Savors is unique in its support of all four combinations of single/multiple data streams and single/multiple views. That is, Savors can show any number of data streams either consolidated in the same view or spread out across multiple views. In multi-data scenarios, data streams can be synchronized by time allowing even distributed data streams to be viewed in the same temporal context. In single-data multi-view scenarios, views are updated in lockstep fashion so they show the same data at the same time. Together with its integrated parallelization capabilities, this allows Savors to easily show meaningful results from across even very large installations.
=====

== sc-im

https://github.com/andmarti1424/sc-im[`https://github.com/andmarti1424/sc-im`]

=====
Spreadsheet Calculator Improvised, aka sc-im, is an ncurses based, vim-like spreadsheet calculator.
The features include:

* Vim movements commands for editing cell content.
* UNDO / REDO.
* 65.536 rows and 702 columns supported. (The number of rows can be expanded to 1.048.576 if wished).
* CSV / TAB delimited / XLSX file import and export. ODS import. Markdown export.
* Key-mappings.
* Autobackup.
* Direct color support - specifing the RGB values, screen colors can be customized by user, even at runtime.
* Colorize cells or give them format such as bold, italic or underline.
* Wide character support. The following alphabets are supported: English, Spanish, French, Italian, German, Portuguese, Russian, Ukrainian, Greek, Turkish, Czech, Japanese, Chinese.
* Sort of rows.
* Filter of rows.
* Subtotals.
* Cell shifting.
* Clipboard support.
* GNUPlot interaction.
* Scripting support with LUA. Also with triggers and c dynamic linked modules.
=====

== sd

https://github.com/chmln/sd[`https://github.com/chmln/sd`]

=====
An intuitive find & replace CLI.
The features include:

* regex syntax that you already know from JavaScript and Python. Forget about dealing with quirks of sed or awk - get productive immediately.
* Non-regex find & replace. No more backslashes or remembering which characters are special and need to be escaped.
* Find & replace expressions are split up, which makes them easy to read and write. No more messing with unclosed and escaped slashes.
* Defaults follow common sense and are tailored for typical daily use.
=====

== seashells

https://seashells.io/[`https://seashells.io/`]

https://github.com/anishathalye/seashells[`https://github.com/anishathalye/seashells`]

=====
Seashells lets you pipe output from command-line programs to the web in real-time, even without installing any new software on your machine. You can use it to monitor long-running processes like experiments that print progress to the console. You can also use Seashells to share output with friends.

While you can use netcat for convenience (because it comes preinstalled on most systems), if you use Seashells often, it's highly recommended that you install the seashells client. You can install it by running pip install seashells.

Once you have the client installed, you can pipe output to seashells instead of piping to nc seashells.io 1337. The client gives you additional features, such as showing output on stdout as well as forwarding to Seashells. Run seashells --help for more information about using the client. 
=====

== sed

=====
A Unix utility that parses and transforms text, using a simple, compact programming language.
sed was one of the earliest tools to support regular expressions, and remains in use for text processing, most notably with the substitution command.
=====

https://www.gnu.org/software/sed/[`https://www.gnu.org/software/sed/`]

*GNU Manual* - https://www.gnu.org/software/sed/manual/sed.html[`https://www.gnu.org/software/sed/manual/sed.html`]

*Wikipedia* - https://en.wikipedia.org/wiki/Sed[`https://en.wikipedia.org/wiki/Sed`]

*sed: An Introduction and Tutorial* - https://www.grymoire.com/Unix/Sed.html[`https://www.grymoire.com/Unix/Sed.html`]

*GNU sed Awesome Stream Editor* - https://learnbyexample.github.io/learn_gnused/[`https://learnbyexample.github.io/learn_gnused/`]

== sg3_utils

https://sg.danny.cz/sg/sg3_utils.html[`https://sg.danny.cz/sg/sg3_utils.html`]

https://sg.danny.cz/sg/sdparm.html[`https://sg.danny.cz/sg/sdparm.html`]

https://www.admin-magazine.com/HPC/Articles/When-I-O-Workloads-Don-t-Perform[`https://www.admin-magazine.com/HPC/Articles/When-I-O-Workloads-Don-t-Perform`]

=====
The sg3_utils package contains utilities that send SCSI commands to devices. As well as devices on transports traditionally associated with SCSI (e.g. Fibre Channel (FCP), Serial Attached SCSI (SAS) and the SCSI Parallel Interface(SPI)) many other devices use SCSI command sets. ATAPI cd/dvd drives and SATA disks that connect via a translation layer or a bridge device are examples of devices that use SCSI command sets.

This package contains over 50 utilities, their `man` pages, build files and general documentation.
A few of these utilities are:

* `sdparm` - A utility for accessing SCSI device parameters that can be used to
access parameters on any device that uses a SCSI command set.
This utility currently contains over 500 entries spread across generic mode pages, transport specific mode pages, vendor specific mode pages, Vital Product Data (VPD) pages and their fields.
* `sg_dd` - A variant of the standard UNIX command `dd` that copies files that is specialized for devices
that use the SCSI command set.
* `sg_ses` - A utility that enables a user to manage and sense the state of the power supplies, cooling devices, displays, indicators, individual drives, and other non-SCSI elements installed in an enclosure.
* `sg_logs` - A utility to fetch and decode log pages.
=====

== shc

https://github.com/neurobin/shc[`https://github.com/neurobin/shc`]

=====
A generic shell script compiler. Shc takes a script, which is specified on the command line and produces C source code. The generated source code is then compiled and linked to produce a stripped binary executable.

The compiled binary will still be dependent on the shell specified in the first line of the shell code (i.e shebang) (i.e. #!/bin/sh), thus shc does not create completely independent binaries.

shc itself is not a compiler such as cc, it rather encodes and encrypts a shell script and generates C source code with the added expiration capability. It then uses the system compiler to compile a stripped binary which behaves exactly like the original script. Upon execution, the compiled binary will decrypt and execute the code with the shell -c option.
=====

== shdoc

https://github.com/reconquest/shdoc[`https://github.com/reconquest/shdoc`]

=====
A documentation generator for bash/zsh/sh for generating API documentation in Markdown from shell scripts source.
shdoc parses annotations in the beginning of a given file and alongside function definitions, and creates a markdown file with ready to use documentation.
=====

== shell-functools

https://github.com/sharkdp/shell-functools[`https://github.com/sharkdp/shell-functools`]

=====
A collection of functional programming tools for the shell.
This project provides higher order functions like map, filter, foldl, sort_by and take_while as simple command-line tools. Following the UNIX philosophy, these commands are designed to be composed via pipes. A large collection of functions such as basename, replace, contains or is_dir are provided as arguments to these commands.
=====

== shift

https://github.com/pkolano/shift[`https://github.com/pkolano/shift`]

=====
Shift is a framework for Self-Healing Independent File Transfer that provides high performance and resilience for local and remote transfers through a variety of techniques. These include end-to-end integrity via cryptographic hashes, throttling of transfers to prevent resource exhaustion, balancing transfers across resources based on load and availability, and parallelization of transfers across multiple source and destination hosts for increased redundancy and performance. In addition, Shift was specifically designed to accommodate the diverse heterogeneous environments of a widespread user base with minimal assumptions about operating environments. In particular, Shift is unique in its ability to provide advanced reliability and automatic single and multi-file parallelization to any stock command-line transfer application while being easily deployed by both individual users as well as entire organizations.

Shift includes the following features, among others:

support for local, LAN, and WAN transfers

* drop-in replacement for both `cp` and `scp` (basic options only)
* tracking of individual file operations with on-demand status
* transfer stop and restart
* email notification of completion, errors, and warnings
* local and remote tar creation/extraction
* rsync-like synchronization based on modification times and checksums
* integrity verification of transfers with partial retransfer/resum to
* detection of silent corruption between transfers of the same file
* throttling based on local and remote resource utilization
* automatic retrieval/release of files residing on DMF-managed file systems
* automatic striping of files transferred to Lustre file systems
* fully self-contained besides perl core and ssh
* automatic detection and selection of higher performance transports and
hash utilities when available including `bbcp`, `bbftp`, `gridftp`, `mcp`, `msum`,
and `rsync`
* automatic many-to-many parallelization of single and multi-file
transfers with file system equivalence detection and rewriting

Shift is in active production at the NASA Advanced Supercomputing Facility
and has facilitated approximately 2.0M transfers over 3.0B files totalling 170 PB (as of Dec. 2020) since deployment in March 2012.
=====

== shuf

https://en.wikipedia.org/wiki/Shuf[`https://en.wikipedia.org/wiki/Shuf`]

=====
A command-line utility included in the textutils package of GNU Core Utilities for creating a standard output consisting of random permutations of the input. 
=====

== singularity

https://github.com/sylabs/singularity[`https://github.com/sylabs/singularity`]

https://singularity.hpcng.org/[`https://singularity.hpcng.org/`]

https://www.admin-magazine.com/HPC/Articles/Singularity-A-Container-for-HPC[`https://www.admin-magazine.com/HPC/Articles/Singularity-A-Container-for-HPC`]

https://tin6150.github.io/psg/blogger_container_hpc.html[`https://tin6150.github.io/psg/blogger_container_hpc.html`]

https://pythonspeed.com/articles/containers-filesystem-data-processing/[`https://pythonspeed.com/articles/containers-filesystem-data-processing/`]

=====
Singularity is a free, cross-platform and open-source computer program that performs operating-system-level virtualization also known as containerization.
One of the main uses of Singularity is to bring containers and reproducibility to scientific computing and the high-performance computing (HPC) world.
The need for reproducibility requires the ability to use containers to move applications from system to system.
Using Singularity containers, developers can work in reproducible environments of their choosing and design, and these complete environments can easily be copied and executed on other platforms.
Singularity can import Docker images and either convert them to Singularity images or run the Docker container directly.

Singularity is able to support natively high-performance interconnects, such as InfiniBand and Intel Omni-Path Architecture (OPA),
as well as any PCIe-attached device within the compute node, such as graphic accelerators.
Singularity also has native support for Open MPI library by utilizing a hybrid MPI container approach where OpenMPI exists both inside and outside the container.

The differences between Singularity and Docker include:

* Docker files are stored in a loca image cache, while a Singularity file is just another
file on the filesystem
* Singularity runs container processes as child processes rather than with a daemon like Docker
* Docker is designed for microservices that do one small thing alone and well, while
Singularity is designed for images that target a single application that can have
difficult dependencies.

Once Singularity is installed, you can get a list of available commands via:

`singularity help`

To locate groups, collections and containers of interest:

`singularity search lolcow`

To download a native Singularity image found via `singularity search lolcow` use
the following.  The `library:` prefix tells it to search the Container Library.
This particular example should download a `lolcow_1.0.sif` file.

`singularity pull library://sylabsed/tutorial/lolcow:1.0`

Docker images can also be downloaded via the `docker://` uri.  This example
should download a `lolcow_latest.sif` file.  This is a more complex process since
Docker images are stored in layers and thus Singularity must down them and then
combine them into a single Singularity file.

`singularity pull docker://sylabsio/lolcow`

There is a `build` command that also downloads pre-built images, but instead of
just downloading the image it converts it to the latest Singularity image format after
the download.  This command can also be used to create images from other images or
from scratch, or to convert an image between the supported container formats.

`singularity build library://sylabsed/tutorial/lolcow:1.0`

`singularity build docker://sylabsio/lolcow`

A `shell` command spawns a new shell within your container within which you
can interact with it as if it were a virtual machine. This can be done with
local or remote images.  The container disappears
when you exit the shell.

`singularity shell lolcow_latest.sif`

`singularity shell library://sylabsed/tutorial/lolcow:1.0`

The `exec` command enables you to execute a command within a container.
A container is created to run the command and then disappears after
running it.  This can also be done with remote images.

`singularity exec lolcow_latest.sif cowsay moo`

The containers conttain `runscripts` and can be run via either the
`run` command:

`singularity run lolcow_latest.sif`

or by running the container as an executable:

`./lolcow_latest.sif`
=====

== slurm

https://slurm.schedmd.com/[`https://slurm.schedmd.com/`]

=====
Slurm is an open source, fault-tolerant, and highly scalable cluster management and job scheduling system for large and small Linux clusters.
The command-line programs for Slurm are:

* https://slurm.schedmd.com/sacct.html[`salloc`] - obtain a job allocation
* `sbatch` - submit a batch script for later execution
* `srun` - obtain a job allocation and executive an application
* `sattach` - attach to a job step
* `sacct` - display accounting data
* `sacctmgr` - view and modify account information
* `sbcast` - transfer file to a job's compute nodes
* `scancel` - signal jobs, job arrays, and/or job steps
* `sdiag` - scheduling diagnostic tool
* `sprio` - view the factors that comprise a job's scheduling priority
* `sreport` - generate reports from the slurm accounting data
* `sshare` - tool for listing the shares of associations to a cluster
* `sstat` - display various status information of a running job/step
* `strigger` - used to set, get or clear trigger information
* `squeue` - view information about jobs
* `sinfo` - view information about nodes and partitions
* `scontrol` - used view and modify configuration and state 
=====

== smartmontools

https://www.smartmontools.org/[`https://www.smartmontools.org/`]

https://linux.die.net/man/8/smartctl[`https://linux.die.net/man/8/smartctl`]

=====
The smartmontools package contains two utility programs (`smartctl` and `smartd`) to control and monitor storage systems using the Self-Monitoring, Analysis and Reporting Technology System (SMART) built into most modern ATA/SATA, SCSI/SAS and NVMe disks. In many cases, these utilities will provide advanced warning of disk degradation and failure.
=====

== socat

http://www.dest-unreach.org/socat/[`http://www.dest-unreach.org/socat/`]

https://www.redhat.com/sysadmin/getting-started-socat[`https://www.redhat.com/sysadmin/getting-started-socat`]

https://copyconstruct.medium.com/socat-29453e9fc8a6[`https://copyconstruct.medium.com/socat-29453e9fc8a6`]

=====
The socat utility is a relay for bidirectional data transfers between two independent data channels.This tool is regarded as the advanced version of netcat. They do similar things, but socat has more additional functionality, such as permitting multiple clients to listen on a port, or reusing connections.

There are many ways to use socate effectively. Here are a few examples:

* TCP port forwarder (one-shot or daemon)
* External socksifier
* Tool to attack weak firewalls (security and audit)
* Shell interface to Unix sockets
* IP6 relay
* Redirect TCP-oriented programs to a serial line
* Logically connect serial lines on different computers
* Establish a relatively secure environment (su and chroot) for running client or server shell scripts with network connections
=====

== sox

http://sox.sourceforge.net/[`http://sox.sourceforge.net/`]

=====
SoX reads and writes audio files in most popular formats and can optionally apply effects to them. It can combine multiple input sources, synthesise audio, and, on many systems, act as a general purpose audio player or a multi-track audio recorder. It also has limited ability to split the input into multiple output files.
=====

== space

https://space.sh/[`https://space.sh/`]

https://github.com/space-sh/space[`https://github.com/space-sh/space`]

=====
Space is a free, open source and GPL licensed automation tool with a very small footprint.
Space only depends on Bash and it's exported scripts only depends on the simpler POSIX shell, so it practically runs anywhere.
Space uses a modular decentralized system for the sharing and reusing of components.
You can build shell scripts applications using space, and you can use space as a command line tool to expand your terminal powers.

Space is for building portable server apps and automation tasks. It is modular and can serve as the foundation of your own tools.
Space is very, very non-intrusive. If you want to manage servers remotely Space would SSH into those servers to run your tasks and never upload anything to the server, nor have any dependencies other than a POSIX shell (ash/dash/bash).
=====

== sqlite

=== db-to-sqlite

https://github.com/simonw/db-to-sqlite[`https://github.com/simonw/db-to-sqlite`]

=====
CLI tool for exporting tables or queries from any SQL database to a SQLite file.
=====

=== Dogsheep

https://dogsheep.github.io/[`https://dogsheep.github.io/`]

https://simonwillison.net/tags/dogsheep/[`https://simonwillison.net/tags/dogsheep/`]

=====
Dogsheep is a collection of tools for personal analytics using SQLite and Datasette.

Big internet companies know a lot about us. By exporting that data back out of them we can see what they know and maybe learn something interesting about ourselves.
=====

=== sqlite-utils

https://github.com/simonw/sqlite-utils[`https://github.com/simonw/sqlite-utils`]

https://simonwillison.net/2019/Feb/25/sqlite-utils/[`https://simonwillison.net/2019/Feb/25/sqlite-utils/`]

https://sqlite-utils.datasette.io/en/stable/[`https://sqlite-utils.datasette.io/en/stable/`]

=====
Python CLI utility and library for manipulating SQLite databases.
The features include:

* Pipe JSON (or CSV or TSV) directly into a new SQLite database file, automatically creating a table with the appropriate schema
* Configure SQLite full-text search against your database tables and run search queries against them, ordered by relevance
* Run transformations against your tables to make schema changes that SQLite ALTER TABLE does not directly support, such as dropping columns
* Extract columns into separate tables to better normalize your existing data
=====

== ssh

https://github.com/moul/awesome-ssh[`https://github.com/moul/awesome-ssh`]

* *A Visual Guide to SSH Tunnels* - https://robotmoon.com/ssh-tunnels/[`https://robotmoon.com/ssh-tunnels/`]
* *SSH Best Practices Using Certificates, 2FA and Bastions* - https://goteleport.com/blog/how-to-ssh-properly/[`https://goteleport.com/blog/how-to-ssh-properly/`]
* *The Cyber Plumber's Handbook* - https://github.com/opsdisk/the_cyber_plumbers_handbook[`https://github.com/opsdisk/the_cyber_plumbers_handbook`]
* *

=== basshfs

https://github.com/pkolano/basshfs[`https://github.com/pkolano/basshfs`]

=====
Working with remote systems over SSH is common in HPC environments where the size of data sets makes them nontrivial to relocate. To run arbitrary commands on that data, a full SSH session is required. There are cases, however, when the user may wish to perform simpler operations such as checking file existence and size, viewing differences between configuration files, creating directories, etc. that can be achieved with more limited access. Juggling multiple sessions to multiple hosts may be inconvenient for such simple tasks. BASSHFS is a tool that allows users to perform such tasks within a single terminal on a single host by transparently carrying out remote operations as needed to present remote files as if they are locally mounted when using the bash shell.

BASSHFS is similar to the existing SSHFS utility except it is does not require FUSE kernel support. Instead, BASSHFS uses the aliasing and function mechanisms of the bash shell to intercept program invocations and remap those that are supported to its own versions. These internal versions determine if files on the command line are local or remote. Remote files are processed transparently using a persistent SSH connection to the associated host(s). Output associated with the local and remote files is then multiplexed together into the standard unified format associated with the original command. To the user, it appears as if all files reside on a local file system even though they may span multiple files systems on multiple hosts.
=====

=== crash

An SSH alternative featuring:

https://github.com/stealth/crash[`https://github.com/stealth/crash`]

=====
* IPv6 ready
* lightweight, straight forward and extensible protocol using TLS 1.2+ as transport layer
* man-in-the-middle safe due to its authentication mechanism which involves the servers host key into the auth process
* built-in traffic blinding against timing and packet-size infoleak attacks
* not relying on any system auth frameworks such as PAM
* can be entirely run as user, no need to setup config files
* passive/active connects on both ends with most flexible local/remote port binding possibilities
* easy to port to embedded systems such as routers
* quiet/hidden mode for secret administration and take-back functionality for owned boxes
* trigger-mode via syslog, mail or other files if requested
* emergency mode to extract all necessary key files from the running binary
* may be started as a CGI with all above functionality, command switches passed via query-string
* integrated tcp-wrapper-like D/DoS protection
* intentionally not passing local $ENV to remote to avoid info leaks
* supports Perfect Forward Secrecy via DH Kex
* can forward TCP and UDP sockets to remote
* SOCKS4 and SOCKS5 support to forward browser sessions to remote
* SNI hiding mode
=====

=== sshim

https://github.com/pkolano/sshim[`https://github.com/pkolano/sshim`]

=====
In typical security architectures, users access internal resources by first logging into an SSH bastion system that is locked down to a high degree to severely reduce the possibility of external compromise. Such architectures can be configured to allow remote commands such as scp and rsync to operate between an external host and internal host through an intermediate hop to the bastion host. Due to the stateful nature of SSH connections, when a bastion host becomes unavailable due to hardware/software failures or planned maintenance, all active remote commands will be terminated. Since security updates must be applied to systems in a timely manner and many updates require system reboots, it is difficult to provide stable 24x7 access to users without compromising either security or usability.

SSHIM is a component that sits between the local program and the SSH channel and again between the SSH channel and the remote side of the program. It is invoked using options that change the program used to spawn the SSH channel (e.g. rsync's -e option or scp's -S option). When first invoked, SSHIM initiates the SSH channel and instead of calling the remote side of the local program, invokes itself on the remote system, which starts a limited daemon that itself invokes the remote side. Because the two sides of the local program are connected to SSHIM instances instead of SSH, they are unaware when the SSH channel is broken. When SSHIM detects a channel failure, the local side respawns the connection and attempts to reconnect to its remote counterpart. When successful, the remote command continues its operation as if the connection were stable.

SSHIM is unique in its ability to provide resilient SSH connectivity without changes to the SSH protocol itself. In particular, an organization using the previously described bastion architecture can deploy two (or more) redundant systems. When updates to the active bastion are necessary, the passive bastion can simply take over the active IP address using standard techniques such as gratuitous ARP. If the SSHIM tool is being used for all connections, remote commands will transparently reroute through the new active bastion when the new passive bastion is updated without any failures noticeable to the user. SSHIM is also of use on mobile devices such as laptops that may change networks while a long-running ssh remote command is executing.
=====

=== sshtools

https://github.com/vaporup/ssh-tools[`https://github.com/vaporup/ssh-tools`]

=====
Tools to make ssh more convenient:

* `ssh-ping` - checks if host is reachable using `ssh_config`
* `ssh-version` - shows version of remote SSH server
* `ssh-diff` - diff a file over SSH
* `ssh-facts` - obtain info about remote system
* `ssh-hostkeys` - prints server host keys in several formats
* `ssh-keyinfo` - prints keys in several formats
* `ssh-certinfo` - shows validity and info about SSH certificates
* `ssh-force-password` - enforces password authentication
=====

== sysbox

https://github.com/skx/sysbox[`https://github.com/skx/sysbox`]

=====
The idea here is to collect simple utilities and package them as a single binary, written in go, in a similar fashion to the busybox utility.
=====

== sysstat

https://github.com/sysstat/sysstat[`https://github.com/sysstat/sysstat`]

https://www.techrepublic.com/article/how-to-use-the-linux-iostat-command-to-check-on-your-storage-subsystem/[`https://www.techrepublic.com/article/how-to-use-the-linux-iostat-command-to-check-on-your-storage-subsystem/`]

https://www.tecmint.com/sysstat-commands-to-monitor-linux/[`https://www.tecmint.com/sysstat-commands-to-monitor-linux/`]

=====
The sysstat package contains various utilities, common to many commercial Unixes, to monitor system performance and usage activity:

* `iostat` reports CPU statistics and input/output statistics for block devices and partitions.
* `mpstat` reports individual or combined processor related statistics.
* `pidstat` reports statistics for Linux tasks (processes) : I/O, CPU, memory, etc.
* `tapestat` reports statistics for tape drives connected to the system.
* `cifsiostat` reports CIFS statistics.

Sysstat also contains tools you can schedule via cron or systemd to collect and historize performance and activity data:

* `sar` collects, reports and saves system activity information (see below a list of metrics collected by sar).
* `sadc` is the system activity data collector, used as a backend for sar.
* `sa1` collects and stores binary data in the system activity daily data file. It is a front end to sadc designed to be run from cron or systemd.
* `sa2` writes a summarized daily activity report. It is a front end to sar designed to be run from cron or systemd.
* `sadf` displays data collected by sar in multiple formats (CSV, XML, JSON, etc.) and can be used for data exchange with other programs. This command can also be used to draw graphs for the various activities collected by sar using SVG (Scalable Vector Graphics) format.
=====

== SystemTap

https://sourceware.org/systemtap/wiki/HomePage[`https://sourceware.org/systemtap/wiki/HomePage`]

https://en.wikipedia.org/wiki/SystemTap[`https://en.wikipedia.org/wiki/SystemTap`]

=====
A scripting language and tool for dynamically instrumenting running production Linux kernel-based operating systems. System administrators can use SystemTap to extract, filter and summarize data in order to enable diagnosis of complex performance or functional problems. 
SystemTap files are written in the SystemTap language (saved as `.stp` files) and run with the `stap` command-line.

The system carries out a number of analysis passes on the script before allowing it to run. Scripts may be executed with one of three backends selected by the --runtime= option. The default is a loadable kernel module, which has the fullest capability to inspect and manipulate any part of the system, and therefore requires most privilege. Another backend is based on the dynamic program analysis library DynInst to instrument the user's own user-space programs only, and requires least privilege. The newest backend[9] is based on eBPF byte-code, is limited to the Linux kernel interpreter's capabilities, and requires an intermediate level of privilege. In each case, the module is unloaded when the script has finished running. 
=====

// TTTT

== tab

https://tkatchev.bitbucket.io/tab/index.html[`https://tkatchev.bitbucket.io/tab/index.html`]

=====
A kind of programming language/shell calculator.
=====

== tailscale

https://tailscale.com/[`https://tailscale.com/`]

* How to Use Tailscale* - https://stanislas.blog/2021/08/tailscale/[`https://stanislas.blog/2021/08/tailscale/`]

=====
Tailscale is a service based on WireGuard that lets one’s devices form a peer-to-peer private network in a easy and seamless manner.
=====

== termtosvg

https://nbedos.github.io/termtosvg/[`https://nbedos.github.io/termtosvg/`]

=====
A Unix terminal recorder written in Python that renders your command line sessions as standalone SVG animations.
=====

== thefuck

https://github.com/nvbn/thefuck[`https://github.com/nvbn/thefuck`]

=====
A console command that corrects errors in previous console commands.
=====

== time

https://www.gnu.org/software/time/[`https://www.gnu.org/software/time/`]

https://unix.stackexchange.com/questions/52313/how-to-get-execution-time-of-a-script-effectively[`https://unix.stackexchange.com/questions/52313/how-to-get-execution-time-of-a-script-effectively`]

https://linuxconfig.org/time-your-bash-scripts-and-procedures-from-inside-the-code[`https://linuxconfig.org/time-your-bash-scripts-and-procedures-from-inside-the-code`]

https://news.ycombinator.com/item?id=27725286[`https://news.ycombinator.com/item?id=27725286`]

https://news.ycombinator.com/item?id=27839904[`https://news.ycombinator.com/item?id=27839904`]

=====
The GNU `time` commnad runs another program and then displays information about the resources
used by that program.
Often your shell (e.g. bash, zsh) will have its own built-in version of 'time' which takes precedence over GNU time. Use `type` to determine whether time is a built-in keyword or not. Use `env` or absolute path to force using the 'time' binary. 
You can also force use of the GNU binary via `command time`.
=====

== tldr

https://github.com/tldr-pages/tldr[`https://github.com/tldr-pages/tldr`]

=====
The tldr-pages project is a collection of community-maintained help pages for command-line tools, that aims to be a simpler, more approachable complement to traditional man pages.
This repository is an ever-growing collection of examples for the most common UNIX, Linux, macOS, SunOS and Windows command-line tools.
=====

=== tealdeer

https://github.com/dbrgn/tealdeer[`https://github.com/dbrgn/tealdeer`]

=====
A very fast implementation of tldr in Rust: Simplified, example based and community-driven man pages.
=====

== tidy

http://www.html-tidy.org/[`http://www.html-tidy.org/`]

=====
Tidy is a console application for Mac OS X, Linux, Windows, UNIX, and more. It corrects and cleans up HTML and XML documents by fixing markup errors and upgrading legacy code to modern standards.
=====

== tmux

https://github.com/tmux/tmux[`https://github.com/tmux/tmux`]

https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/[`https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/`]

https://thoughtbot.com/blog/a-tmux-crash-course[`https://thoughtbot.com/blog/a-tmux-crash-course`]

https://ostechnix.com/tmux-command-examples-to-manage-multiple-terminal-sessions/[`https://ostechnix.com/tmux-command-examples-to-manage-multiple-terminal-sessions/`]

=====
A terminal multiplexer that enables a number of terminals to be created, accessed, and controlled
from a single screen.  It may be detached from a screen and continue running in
the background, then later reattached.
=====

=== heytmux

https://github.com/junegunn/heytmux[`https://github.com/junegunn/heytmux`]

=====
Tmux scripting made easy.
=====

=== sixel-tmux

https://github.com/csdvrx/sixel-tmux[`https://github.com/csdvrx/sixel-tmux`]

A terminal multiplexer that display graphics one way or another.

=== tmux-cssh

https://github.com/peikk0/tmux-cssh[`https://github.com/peikk0/tmux-cssh`]

=====
Spawns multiple synchronized SSH sessions inside a tmux session.
=====

== tokei

https://github.com/XAMPPRocky/tokei[`https://github.com/XAMPPRocky/tokei`]

=====
Tokei is a program that displays statistics about your code. Tokei will show the number of files, total lines within those files and code, comments, and blanks grouped by language.
=====

== transfer.sh

https://github.com/dutchcoders/transfer.sh[`https://github.com/dutchcoders/transfer.sh`]

=====
Easy and fast file sharing from the command-line. This code contains the server with everything you need to create your own instance.  Transfer.sh currently supports the s3 (Amazon S3), gdrive (Google Drive), storj (Storj) providers, and local file system (local).
=====

== tsv-utils

https://github.com/eBay/tsv-utils[`https://github.com/eBay/tsv-utils`]

=====
A set of command line utilities for manipulating large tabular data files. Files of numeric and text data commonly found in machine learning and data mining environments. Filtering, sampling, statistics, joins, and more.
These tools are especially useful when working with large data sets. They run faster than other tools providing similar functionality, often by significant margins.

The tools in the set are:

* `tsv-filter` - Filter lines using numeric, string and regular expression comparisons against individual fields.
* `tsv-select` - Keep a subset of columns (fields). Like cut, but supporting named fields, field reordering, and field exclusions.
* `tsv-uniq` - Filter out duplicate lines using either the full line or individual fields as a key.
* `tsv-summarize` - Summary statistics on selected fields, against the full data set or grouped by key.
* `tsv-sample` - Sample input lines or randomize their order. A number of sampling methods are available.
* `tsv-join` - Join lines from multiple files using fields as a key.
* `tsv-pretty` - Print TSV data aligned for easier reading on the command-line.
* `csv2tsv` - Convert CSV files to TSV.
* `tsv-split` - Split data into multiple files. Random splits, random splits by key, and splits by blocks of lines.
* `tsv-append` - Concatenate TSV files. Header-aware; supports source file tracking.
* `number-lines` - Number the input lines.
* `keep-header` - Run a shell command in a header-aware fashion.
=====

== ttygif

https://github.com/icholy/ttygif[`https://github.com/icholy/ttygif`]

=====
Converts a ttyrec file into gif files. It's a stripped down version of ttyplay that screenshots every frame.
=====

== tv

https://github.com/alexhallam/tv[`https://github.com/alexhallam/tv`]

=====
Tidy Viewer (tv) is a cross-platform csv pretty printer that uses column styling to maximize viewer enjoyment.
The features include:

* Nice colors out of the box
* Significant digit printing (no more decimal dust taking valuable terminal space)
* NA comprehension and coloring (no more misaligned data cells due to missing data)
* Dimensions printed first (no more guessing how many rows and columns are in the data)
* Column overflow logic (no more misalignment due to terminal dimensions)
* Long string/Unicode truncation (no more long strings pushing other data around)
* Customizable with a dotfile config (bring your own theme)
=====

// UUUU

== udftools

https://github.com/pali/udftools[`https://github.com/pali/udftools`]

https://sourceforge.net/projects/linux-udf/[`https://sourceforge.net/projects/linux-udf/`]

=====
A set of tools for working with ISO9660 filesystems.  They are:

* `crdwtool` - perform various actions on a CD-R, CD-RW and DVD-R
* `mkudffs` - create a UDF filesystem
* `pktsetup` - set up and tear down packet device association
* `udfinfo` - show information about UDF filesystem
* `udflabel` — show or change UDF filesystem label
& `wrudf` - maintain a UDF filesystem

The Github URL contains the updated software, but the documentation - what their is - is
at the Sourceforge URL.
=====

== unblob

https://github.com/onekey-sec/unblob[`https://github.com/onekey-sec/unblob`]

https://unblob.org/[`https://unblob.org/`]

=====
An accurate, fast, and easy-to-use extraction suite. It parses unknown binary blobs for more than 30 different archive, compression, and file-system formats, extracts their content recursively, and carves out unknown chunks that have not been accounted for.  It has a Command Line Interface and can be used as a Python library.
=====

== uniscribe

https://github.com/janlelis/uniscribe[`https://github.com/janlelis/uniscribe`]

=====
Describes Unicode characters with their name and shows compositions.
=====

== up

https://github.com/akavel/up[`https://github.com/akavel/up`]

=====
up is the Ultimate Plumber, a tool for writing Linux pipes in a terminal-based UI interactively, with instant live preview of command results.

The main goal of the Ultimate Plumber is to help interactively and incrementally explore textual data in Linux, by making it easier to quickly build complex pipelines, thanks to a fast feedback loop. This is achieved by boosting any typical Linux text-processing utils such as grep, sort, cut, paste, awk, wc, perl, etc., etc., by providing a quick, interactive, scrollable preview of their results.
=====

== upm

https://github.com/replit/upm[`https://github.com/replit/upm`]

=====
UPM is the Universal Package Manager. It allows you to manage packages for any (supported) programming language through the same interface following the principle of least astonishment. At Repl.it, we use UPM to provide deep package manager integration for many different programming languages using the same infrastructure.

UPM does not implement package management itself. Instead, it runs a package manager for you. The value added is:

* you don't have to figure out whether to use Pip or Pipenv or Poetry to manage your Python packages or wade into the Cabal-versus-Stack holy war in Haskell-land
* you don't have to puzzle out why pip search flask doesn't return Flask in the search results
* you don't have to debug Bundler silently dropping your command-line options if you don't specify them in the right (undocumented) order
* you don't have to think about why the developers of NPM and Yarn decided to implement two completely different and mutually incompatible behaviors for list --depth=0, neither of which is exactly what you want
* you don't have to investigate what format the Yarn lockfile is in (turns out: almost YAML, but not quite)

In other words, UPM eliminates the need to remember a huge collection of language-specific package manager quirks and weirdness, and adds a few nifty extra features like dependency guessing and machine-parseable specfile and lockfile listing.
=====

== usbrip

https://github.com/snovvcrash/usbrip[`https://github.com/snovvcrash/usbrip`]

https://ostechnix.com/show-usb-devices-event-history-using-usbrip-in-linux/[`https://ostechnix.com/show-usb-devices-event-history-using-usbrip-in-linux/`]

=====
Usbrip is a command line forensics tool to track the history of all USB device connections in Linux. It analyzes your system's log data using journelctl command or from log files such as /var/log/syslog and /var/log/messages and displays the collected USB event history in standard output or a file.
=====

== usql

https://github.com/xo/usql[`https://github.com/xo/usql`]

=====
A universal command-line interface for PostgreSQL, MySQL, Oracle Database, SQLite3, Microsoft SQL Server, and many other databases including NoSQL and non-relational databases!

usql provides a simple way to work with SQL and NoSQL databases via a command-line inspired by PostgreSQL's psql. usql supports most of the core psql features, such as variables, backticks, and commands and has additional features that psql does not, such as syntax highlighting, context-based completion, and multiple database support.

Database administrators and developers that would prefer to work with a tool like psql with non-PostgreSQL databases, will find usql intuitive, easy-to-use, and a great replacement for the command-line clients/tools for other databases.
=====

== util-linux

https://en.wikipedia.org/wiki/Util-linux[`https://en.wikipedia.org/wiki/Util-linux`]

=====
A set of approximately 100 basic Linux system utilities not included in `coreutils`.
=====

// VVVV

== ventoy

https://github.com/ventoy/Ventoy[`https://github.com/ventoy/Ventoy`]

https://ostechnix.com/how-to-create-multiboot-usb-drives-with-ventoy-in-linux/[`https://ostechnix.com/how-to-create-multiboot-usb-drives-with-ventoy-in-linux/`]

=====
Ventoy is an open source tool to create bootable USB drive for ISO/WIM/IMG/VHD(x)/EFI files.
With ventoy, you don't need to format the disk over and over, you just need to copy the image files to the USB drive and boot it. You can copy many image files at a time and ventoy will give you a boot menu to select them.
x86 Legacy BIOS, IA32 UEFI, x86_64 UEFI, ARM64 UEFI and MIPS64EL UEFI are supported in the same way.
Both MBR and GPT partition style are supported in the same way.
Most type of OS supported(Windows/WinPE/Linux/Unix/Vmware/Xen...)
700+ ISO files are tested. 90%+ distros in distrowatch.com supported. 
=====

== virsh

https://ostechnix.com/manage-kvm-virtual-machines-with-virsh-program/[`https://ostechnix.com/manage-kvm-virtual-machines-with-virsh-program/`]

https://computingforgeeks.com/virsh-commands-cheatsheet/[`https://computingforgeeks.com/virsh-commands-cheatsheet/`]

https://libvirt.org/manpages/virsh.html[`https://libvirt.org/manpages/virsh.html`]

=====
Virsh, short for Virtual Shell, is a command line user interface for managing virtual guest machines. Virsh allows you to create, list, edit, start, restart, stop, suspend, resume, shutdown and delete VMs. It currently supports KVM, LXC, Xen, QEMU, OpenVZ, VirtualBox and VMware ESX.
=====

== visidata

https://github.com/saulpw/visidata[`https://github.com/saulpw/visidata`]

https://www.visidata.org/[`https://www.visidata.org/`]

=====
A free, open-source tool that lets you quickly open, explore, summarize, and analyze datasets in your computer’s terminal. VisiData works with CSV files, Excel spreadsheets, SQL databases, and many other data sources.
=====

// WWWW

== websocat

https://github.com/vi/websocat[`https://github.com/vi/websocat`]

https://en.wikipedia.org/wiki/WebSocket[`https://en.wikipedia.org/wiki/WebSocket`]

=====
Netcat, curl and socat for WebSockets.
=====

== wget2

https://github.com/rockdaboot/wget2[`https://github.com/rockdaboot/wget2`]

=====
GNU Wget2 is the successor of GNU Wget, a file and recursive website downloader.
Designed and written from scratch it wraps around libwget, that provides the basic functions needed by a web client.
Wget2 works multi-threaded and uses many features to allow fast operation.
In many cases Wget2 downloads much faster than Wget1.x due to HTTP2, HTTP compression, parallel connections and use of If-Modified-Since HTTP header.

The features include:

* Support for HTTP/1.1 and HTTP/2.0 protocol
* brotli decompression support (Accept-Encoding: br)
* zstandard decompression support, RFC8478 (Accept-Encoding: zstd)
* lzip decompression support, (Accept-Encoding: lzip)
* HPKP - HTTP Public Key Pinning (RFC7469) with persistent database
* TCP Fast Open for plain text and for HTTPS
* TLS Session Resumption including persistent session data cache
* TLS False Start (with GnuTLS >= 3.5.0)
* HTTP2 support via nghttp2 and GnuTLS ALPN including streaming/pipelining
* OCSP stapling + OCSP server querying as a fallback (experimental, needs GnuTLS >= 3.3.11)
* Use libpsl for cookie domain checking (using Public Suffix List)
* Support link conversion (-k/--convert-links and -K/--backup-converted)
=====

== wtf

https://github.com/wtfutil/wtf[`https://github.com/wtfutil/wtf`]

=====
WTF (aka 'wtfutil') is the personal information dashboard for your terminal, providing at-a-glance access to your very important but infrequently-needed stats and data.
=====

// XXXX

== xargs

https://en.wikipedia.org/wiki/Xargs[`https://en.wikipedia.org/wiki/Xargs`]

https://shapeshed.com/unix-xargs/[`https://shapeshed.com/unix-xargs/`]

https://www.tecmint.com/xargs-command-examples/[`https://www.tecmint.com/xargs-command-examples/`]

http://offbytwo.com/2011/06/26/things-you-didnt-know-about-xargs.html[`http://offbytwo.com/2011/06/26/things-you-didnt-know-about-xargs.html`]

=====
xargs (short for "eXtended ARGuments") is a command on Unix and most Unix-like operating systems used to build and execute commands from standard input. It converts input from standard input into arguments to a command. 
=====

== xCAT

=====
The command-line tools available in xCat include:

* `addkit` - Installs a kit on the xCAT management node from a kit tarfile or directory. It creates xCAT database definitions for the kit, kitrepo, and kitcomponent.
* `addkitcomp` - Assigns kit components to an xCAT osimage. The kit component meta rpm, package rpm and deploy parameters will be added to osimage’s otherpkg.pkglist and postbootscripts will be added to osimages’s postbootscripts attribute.
* `bmcdiscover` - Discovers Baseboard Management Controllers (BMCs) using a scan method.  It uses nmap to scan active nodes over a specified IP range. 
* `buildkit` - Provides a collection of utilities that may be used to package a software product as a Kit tarfile that can be used to install software on the nodes of an xCAT cluster. A Kit contains the product software packages, configuration and control information, and install and customization scripts.
* `cfgve` - Can be used to configure a virtual environment for ‘Storage Domain’, ‘Network’ and ‘Template’ objects.
* `cfm2xcat` - Migrates the CFM setup in CSM to the xdcp rsync setup in xCAT.
* `chdef` - Used to change xCAT object definitions which are stored in the xCAT database. 
* `chhypervisor` - Configures the virtualization hosts.
* `chkkitcomp` - Checks if the kit components are compatible with the xCAT osimage.
* `chkosimage` - Checks an xCAT osimage.
* `chvlan` - Adds or removes nodes from the vlan.
* `chvlanports` - Adds or remove node switch interfaces to the vlan.
* `chvm` - Changes HMC-, DFM-, IVM-, and zVM-managed partition profiles or virtual machines.
* `chzone` - Changes the definition of a zone previously defined in the cluster.
* `clonevm` - Promotes the current configuration and storage of a VM to a master, as well as performing the converse operation of creating VMs based on a master.
* `configfpc` - Discovers and configures all Fan Power Controllers (FPCs) and configures the FPC interface.
* `csm2xcat` - Enables the migration of a CSM database to an xCAT database.
* `db2sqlsetup` - Sets up the IBM DB2 database for xCAT to use. 
* `dumpxCATdb` - Dumps the xCAT db tables.
* `genimage` - Generates a stateless image to be used for a diskless install.
* `geninitrd` - Generate an initrd (initial ramfs) which to be used for stateful install or stateless netboot.
* `getmacs` - Collects MAC address from a single or range of nodes.
* `getslnodes` - Queries your SoftLayer account and gets attributes for each server. 
* `gettab` - Selects table rows, based on attribute criteria, and display specific attributes.
* `groups4dsh` - Builds a directory of files for each defined nodegroup in xCAT.
* `imgcapture` - Captures an image from a Linux diskful node and create a diskless or diskful image on the management node.
* `imgexport` - Exports an xCAT image.
* `imgimport` - Imports an xCAT image or configuration file into the xCAT tables so that you can immediately begin deploying with it.
* `liteimg` - Modifies a statelite image by creating a series of links.
* `lsdef` - Used to display xCAT object definitions which are stored in the xCAT database and xCAT object definition templates shipped in xCAT.
* `lsflexnode` - Displays the information of a flexible node.
* `lshwconn` - Displays the connection status for CEC and Frame nodes.
* `lskit` - Lists information for one or more kits, where a kit is a special kind of package that is used to install a software product on one or more nodes in an xCAT cluster.
* `lskitcomp` - Used to list information for one or more kit components.
* `lskitdeployparam` - Lists the kit deployment parameters for one or more kits, or one or more kit components. 
* `lskmodules` - Lists kernel driver modules in RPMs or driver disk image files.
* `lslite` - Displays a summary of the statelite information that has been defined for a noderange or an image.
* `lsslp` - Discovers selected networked services information within the same subnet.
* `lstree` - Displays the tree of service node hierarchy, hardware hierarchy, or VM hierarchy.
* `lsve` - Lists detail attributes for a virtual environment for ‘Data Center’, ‘Cluster’, ‘Storage Domain’, ‘Network’ and ‘Template’ objects.
* `lsvlan` - Lists the existing vlans for the cluster.
* `lsvm` - Lists partition profile information for HMC-, DFM-, IVM-, KVM-, VMware- and zVM-managed nodes.
* `lsxcatd` - Lists xCAT daemon information.
* `makentp` - Sets up the NTP server on the xCAT management node and the service node.
* `mkdef` - Creates xCAT data object definitions.
* `mkdsklsnode` - Defines and/or initializes AIX/NIM diskless machines. 
* `mkflexnode` - Creates a flexible node, where a flexible node is a partition in a complex.
* `mkhwconn` - Sets up connections for CEC and Frame nodes to HMC nodes or hardware server.
* `mknimimage` - Creates both an xCAT osimage definition and the corresponding NIM resource definitions. 
* `mkvlan` - Takes a list of nodes and moves them to a private vlan to configure the switch to create a new tagged vlan on the given nic.
* `mkvm` - Creates HMC-, DFM-, IVM-, and zVM-managed partitions or other virtual machines.
* `mkzone` - Divides the xCAT cluster into multiple zones by defining zones within the cluster.
* `monadd` - Registers a monitoring plug-in to the xCAT cluster.
* `moncfg` - Configures a 3rd party monitoring software to monitor the xCAT cluster.
* `mondecfg` - Deconfigures a 3rd party monitoring software from monitoring the xCAT cluster.
* `monls` - Lists monitoring plug-in modules that can be used to monitor the xCAT cluster.
* `monrm` - Unregisters a monitoring plug-in module from the xCAT cluster.
* `monshow` - Displays the events that happened on the given nodes or the monitoring data that is collected from the given nodes for a monitoring plugin.
* `monstart` - Starts a 3rd party software, (for example start the daemons), to monitor the xCAT cluster. 
* `monstop` - Stops a 3rd party software, (for example start the daemons), from monitoring the xCAT cluster.
* `mysqlsetup` - Sets up the MySQL or MariaDB database for xCAT to use.
* `nimnodecust` - Customizes AIX/NIM standalone machines.
* `nimnodeset` - Initializes AIX/NIM standalone machines.
* `nodeaddunmged` - Creates a unmanaged node, i.e. adds an unmanaged node to the unmanaged group.
* `nodech` - Changes the attributes of a node in the xCAT cluster database.
* `nodechmac` - Updates the MAC address for a node.
* `nodechprofile` - Updates a profile used by a node.
* `nodediscoverdef` - Define the undefined discovery request to a predefined xCAT node, or clean up the discovery entries from the discoverydata table.
* `nodediscoverls` - Lists nodes that have recently been discovered.
* `nodediscoverstart` - Starts the node discovery process.
* `nodediscoverstatus` - Detects if the sequential or profile node discovery process is currently running,
* `nodediscoverstop` - Stops the sequential or profile node discovery process.
* `nodegrpch` - Changes attributes at the group level in the xCAT cluster database.
* `nodeimport` - Creates nodes by importing a hostinfo file which is following stanza format.
* `nodels` - Lists the nodes, and their attributes, from the xCAT database.
* `nodepurge` - Removes all nodes from the database and any related configurations used by the node.
* `noderefresh` - Updates node configurations by running associated kit plugins.
* `noderm` - Removes the nodes in a specified noderange from all database tables.
* `nodestat` - Displays and optionally updates the database with the running status of a single or range of nodes or groups.
* `packimage` - Packs the stateless image from the chroot file system into a file to be sent to the node for a diskless boot.
* `pasu` - Runs the ASU command in out-of-band mode in parallel to multiple nodes.
* `pcons` - Runs a command to a specified noderange.
* `pgsqlsetup` - Sets up the PostgreSQL database for xCAT to use.
* `piflash` - Remotely applies firmware updates to servers.
* `pping` - Pings a list of nodes in parallel.
* `ppping` - Tests the connectivity between nodes in a specified noderange using ping.
* `prsync` - A front-end to rsync for a single or range of nodes and/or groups in parallel.
* `pscp` - Copies a single or multiple set of files and/or directories to a single or range of nodes and/or groups in parallel.
* `psh` - A parallel remote shell to run a command across a list of nodes in parallel.
* `pushinitrd` - Copies the initrd, kernel, params, and static IP info to nodes, so they can be net installed even across vlans (w/o setting up pxe/dhcp broadcast relay). 
* `rbeacon` - Sets a beacon light on a server to on/off/blink, or gives the states of a node or noderange.
* `rbootseq` - Sets the boot sequence (the order in which boot devices should be tried) for the specified blades.
* `rcons` - Provides access to a single remote node serial console, using the out-of-band infrastructure for the node.
* `regnotif` - Registers a Perl module or a command that will get called when changes occur in the desired xCAT database tables.
* `renergy` - Remote energy management tool.
* `replaycons` - Reads the console log stored by conserver for this node, and displays it in a way that simulates the original output of the console.
* `restartxcatd` - Restarts the xCAT daemon.
* `restorexCATdb` - Restores the xCAT db tables.
* `reventlog` - Retrieves or clears remote hardware event logs.
* `rflash` - Performs Licensed Internal Code (LIC) update or firmware update on supported xCAT managed nodes.
* `rinv` - Retrieves hardware configuration information from the on-board Service Processor for a single or range of nodes and groups.
* `rmdef` - Removes xCAT object definitions that are stored in the xCAT database.
* `rmdsklsnode` - Removes all NIM client machine definitions that were created for the specified xCAT nodes.
* `rmflexnode` - Deletes a flexible node created by the mkflexnode command.
* `rmhwconn` - Disconnects CEC and Frame nodes from HMC nodes.
* `rmhypervisor` - Remove the virtualization hosts.
* `rmigrate` - Execute migration of a guest VM between hosts/hypervisors.
* `rmimage` - Removes the Linux stateless or statelite image from the file system.
* `rmkit` - Removes kits on the xCAT management node from kit names.
* `rmkitcomp` - Removes kit components from an xCAT osimage.
* `rmnimimage` - Removes NIM resources specified in an xCAT osimage definition.
* `rmvlan` - Removes the vlan from the cluster.
* `rmvm` - Removes HMC-, DFM-, IVM-, KVM-, VMware- and zVM-managed partitions or virtual machines.
* `rmzone` - Removes a zone from the cluster.
* `rnetboot` - Persuades each type of node in a specified noderange to boot from the network.
* `rollupdate` - Creates and submits scheduler reservation jobs that will notify xCAT to shutdown a group of nodes, run optional out-of-band commands from the xCAT management node, and reboot the nodes.
* `rpower` - Controls the power for a single or range of nodes, via the out-of-band path.
* `rscan` - Collects node information from one or more hardware control points.
* `rsetboot` - Sets the boot media and boot mode that should be used on the next boot of the specified nodes.
* `rspconfig` - Configures the service processors of a node.
* `rspreset` - Resets the service processors of a node.
* `rvitals` - Retrieves hardware vital information from the on-board Service Processor for a single or range of nodes and groups.
* `sinv` - Checks the software configuration of the nodes in the cluster.
* `snmove` - Moves xCAT compute nodes to a different xCAT service node.
* `swapnodes` - Swaps the location info in the db (all the attributes in the ppc table and the nodepos table) between 2 nodes.
* `switchblade` - Assigns the BladeCenter media tray and/or KVM to the specified blade, so that they can be used with that blade. 
* `switchdiscover` - Scans the subnets and discovers all the switches on the subnets.
* `tabgrep` - Lists table names in which an entry for the given node appears.
* `unregnotif` - Unregisters a Perl module or a command that was watching for the changes of the desired xCAT database tables.
* `updateSNimage` - Adds the needed Service Node configuration files to the install image.
* `updatenode` - Update nodes in an xCAT cluster environment.
* `wcons` - Provides access to the remote node serial console of a single or range or nodes or groups.
* `wkill` - Kills the remote screen window for a single or range of nodes or groups.
* `wvid` - Provides access to the remote node video console of a single node, or range of nodes or groups.
* `xCATWorld` - A sample program for interfacing with the xCATWorld.pm plugin.
* `xcat2nim` - Creates and manages AIX NIM definitions based on xCAT node, group and network object definitions.
* `xcatchroot` - Modifies an xCAT AIX diskless operating system image via the chroot command.
* `xcatperftest` - Runs Run xCAT command performance baseline testing on fake nodes.
* `xcattest` - Runs automated xCAT test cases.
* `xcoll` - Formats and consolidates the output of the psh, rinv commands.
* `xdcp` - Concurrently copies files to or from multiple nodes. 
* `xdsh` - Concurrently runs remote commands on multiple nodes, or an install image.
* `xdshbak` - Formats output from the xdsh command. 
* `xdshcoll` - Formats and consolidates the output of the xdsh, sinv commands.
* `xpbsnodes` - A front-end to PBS pbsnode that uses xCAT’s noderange to specify nodes.
=====

== xclip

https://github.com/astrand/xclip[`https://github.com/astrand/xclip`]

=====
A command line utility that is designed to run on any system with an
X11 implementation. It provides an interface to X selections ("the clipboard")
from the command line. It can read data from standard in or a file and place it
in an X selection for pasting into other X applications. xclip can also print
an X selection to standard out, which can then be redirected to a file or
another program.
=====

== xcompress

https://lib.rs/crates/xcompress[`https://lib.rs/crates/xcompress`]

=====
XCompress is a free file archiver utility on Linux, providing multi-format archiving to and extracting from ZIP, Z, GZIP, BZIP2, LZ, XZ, LZMA, 7ZIP, TAR, RAR and ZSTD.
=====

== xdg-utils

https://www.freedesktop.org/wiki/Software/xdg-utils/[`https://www.freedesktop.org/wiki/Software/xdg-utils/`]

=====
A set of tools that allows applications to easily integrate with the desktop environment of the user, regardless of the specific desktop environment that the user runs.

About half of the tools focus on tasks commonly required during the installation of a desktop application and the other half focuses on integration with the desktop environment while the application is running.
=====

-----
xdg-desktop-menu - Install desktop menu items
xdg-desktop-icon - Install icons on the user's desktop
xdg-email - Compose a new email in the user's preferred email client, potentially with subject and other info filled in
xdg-icon-resource - Install icon resources
xdg-mime - Query and install MIME types and associations
xdg-open - Open a URL in the user's preferred application that handles the respective URL or file type
xdg-screensaver - Enable, disable, or suspend the screensaver
xdg-settings - Get or set the default web browser and URL handlers
-----

=== handlr

https://github.com/chmln/handlr[`https://github.com/chmln/handlr`]

=====
Manage your default applications with ease using handlr.  An
alternative to `xdg-utils` with additional functionality.
=====

== xorriso

https://www.gnu.org/software/xorriso/[`https://www.gnu.org/software/xorriso/`]

=====
This copies file objects from POSIX compliant filesystems into Rock Ridge enhanced ISO 9660 filesystems and allows session-wise manipulation of such filesystems. It can load the management information of existing ISO images and it writes the session results to optical media or to filesystem objects.
Vice versa xorriso is able to copy file objects out of ISO 9660 filesystems. 
=====

== xterm

https://invisible-island.net/xterm/[`https://invisible-island.net/xterm/`]

=====
The xterm program is a terminal emulator for the X Window System. It provides DEC VT102 and Tektronix 4014 compatible terminals for programs that can't use the window system directly.

This version implements ISO/ANSI colors using the "new" color model (i.e., background color erase). It also implements most of the control sequences for VT220, as well as selected features from other DEC terminals such as VT320, VT420 and VT520.
=====

// YYYY

== youtube-dl

https://ytdl-org.github.io/youtube-dl/index.html[`https://ytdl-org.github.io/youtube-dl/index.html`]

https://ostechnix.com/youtube-dl-tutorial-with-examples-for-beginners/[`https://ostechnix.com/youtube-dl-tutorial-with-examples-for-beginners/`]

=====
Youtube-dl is a most popular command line YouTube downloader application. Youtube-dl can be able to download a single track or the entire playlist in one go.
=====

=== yt-dlp

https://github.com/yt-dlp/yt-dlp[`https://github.com/yt-dlp/yt-dlp`]

=====
A youtube-dl fork based on the now inactive youtube-dlc. The main focus of this project is adding new features and patches while also keeping up to date with the original project.
=====

== ytmdl

https://github.com/deepjyoti30/ytmdl[`https://github.com/deepjyoti30/ytmdl`]

=====
Download songs from YouTube by getting the audio from YouTube and the metadata from sources like Itunes and Gaana.
=====

// ZZZZ

== zenith

https://github.com/bvaisvil/zenith[`https://github.com/bvaisvil/zenith`]

https://www.admin-magazine.com/HPC/Articles/New-Monitoring-Tools[`https://www.admin-magazine.com/HPC/Articles/New-Monitoring-Tools`]

=====
A terminal application that monitors and presents ASCII charts of an
extensive list of metrics.  Zenith enables you to zoom in on the charts and
manipulate processes.
The features include:

* Optional CPU, Memory, Network, and Disk usage charts
* Quick glances at Disk free space, NIC IP addresses, CPU frequency
* Highlight top users of CPU, Memory, & Disk
* Battery percentage, time to charge or discharge, power used
* A top-like filterable process table that includes per process disk usage
* Change process priority
* Zoomable chart views (with support to scroll back in time)
* Managing processes with signals
* Performance data saved between runs
* GPU Utilization Metrics for NVIDIA GPUs (with --features nvidia)
=====

